import{_ as e,o as t,c as s,Q as l}from"./chunks/framework.e90f0c97.js";const u=JSON.parse('{"title":"T7.Node.js","description":"","frontmatter":{"prev":{"text":"T6.第三方API&&排序","link":"./T6.第三方API&&排序"},"next":{"text":"T8.VitePress","link":"./T8.VitePress.html"}},"headers":[],"relativePath":"md/前端/T7.Node.js.md","filePath":"md/前端/T7.Node.js.md"}'),a={name:"md/前端/T7.Node.js.md"},n=l(`<p><img src="https://pic.imgdb.cn/item/64c4a5611ddac507cc058875.png" alt="img"></p><h1 id="t7-node-js" tabindex="-1">T7.Node.js <a class="header-anchor" href="#t7-node-js" aria-label="Permalink to &quot;T7.Node.js&quot;">​</a></h1><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">难度系数：有点难</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">难度系数：有点难</span></span></code></pre></div><p>了解后端是学习前端的必修课!</p><p>在前面的学习中，我们尝试调用了外部的API。接下来，一个API是怎样诞生的呢？在本节中，你将会浅尝服务器端的相关知识，初试Node.js，熟悉Node.js环境，在本地搭建一个简易服务器，并在这个服务器上搭建自己的API。这道题将带领你从前端初级阶段，迈入高级阶段的大门。做好准备，咱们开始吧！</p></blockquote><h2 id="题目描述" tabindex="-1"><strong>题目描述</strong> <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;**题目描述**&quot;">​</a></h2><p>在前面的学习中，你已经学会调用第三方API。那么，API是如何工作的？我可以写一个自己的API吗？<strong>学习使用Node.js，尝试自己编写一个API。</strong></p><h4 id="题目背景" tabindex="-1">题目背景 <a class="header-anchor" href="#题目背景" aria-label="Permalink to &quot;题目背景&quot;">​</a></h4><blockquote><p>小鱼在调用后端接口的时候总是发现后端描述的变量名与自己写的代码对不上，一番检查之后又发现后端给的接口返回数据不规范，前前后后十几次向后端反馈之后，后端人员怒斥小鱼：你行你上！</p><p>小鱼同学认为这是一次接触后端的好机会，他决定先从一个简单的服务器开始做起。</p></blockquote><h4 id="题目要求" tabindex="-1"><strong>题目要求</strong> <a class="header-anchor" href="#题目要求" aria-label="Permalink to &quot;**题目要求**&quot;">​</a></h4><ol><li>下载Node.js</li><li>用Node.js搭建服务器并利用服务器在<strong>命令框</strong>和<strong>浏览器</strong>上分别显示“hello，glimmer”，迈出第一步！</li><li><strong>实战题目：创建简易 HTTP 服务器</strong></li></ol><p><strong>要求</strong>：使用 Node.js 内置 <code>http</code> 模块实现一个服务器，根据请求路径返回不同响应</p><p><strong>描述</strong>：</p><ol><li>创建 HTTP 服务器监听 <code>3000</code> 端口</li><li>实现路由处理，详细见“期望输出”部分</li><li>所有响应头设置 <code>Content-Type: text/plain; charset=utf-8</code></li></ol><p>你的服务器的<strong>期望输出</strong>：</p><ol><li><p>访问 <code>http://localhost:3000</code> →</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">这是一个首页。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">这是一个首页。</span></span></code></pre></div></li><li><p>访问 <code>http://localhost:3000/date</code> →</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">现在是2025-10-05，北京时间14:30:22  </span></span>
<span class="line"><span style="color:#e1e4e8;">// 你的服务器需要与时俱进！</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">现在是2025-10-05，北京时间14:30:22  </span></span>
<span class="line"><span style="color:#24292e;">// 你的服务器需要与时俱进！</span></span></code></pre></div></li><li><p>访问 <code>http://localhost:3000/about</code> →</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">关于我：......</span></span>
<span class="line"><span style="color:#e1e4e8;">//你还可以试试在自己的博客里调用它！</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">关于我：......</span></span>
<span class="line"><span style="color:#24292e;">//你还可以试试在自己的博客里调用它！</span></span></code></pre></div></li><li><p>访问 <code>http://localhost:3000/xxx</code> →</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">404：页面不存在QwQ   //这个页面指的是访问不到对应路由的结果</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">404：页面不存在QwQ   //这个页面指的是访问不到对应路由的结果</span></span></code></pre></div></li></ol><p>试试看在你的服务器中添加更多接口？</p><p>在完成了以上任务后，整理一下你的心得、代码和测试结果的截图（使用ApiFox 或者 Postman ），导出为一个pdf文件，交给我们欣赏一下吧🥰。</p><hr><h5 id="附加题-对后端实现感兴趣的可以了解" tabindex="-1">附加题：（对后端实现感兴趣的可以了解！） <a class="header-anchor" href="#附加题-对后端实现感兴趣的可以了解" aria-label="Permalink to &quot;附加题：（对后端实现感兴趣的可以了解！）&quot;">​</a></h5><ol><li>利用npm下载express框架（或者去了解一下py的flask框架？）</li><li>学习使用express框架，并利用express框架，制作一个API，完成一个简单常见的任务管理功能：</li></ol><p><strong>描述：</strong></p><ol><li><p><strong>基础设置</strong></p><ul><li>使用 Express 创建服务器监听 3000 端口</li><li>添加中间件解析 JSON 请求体</li></ul></li><li><p><strong>数据格式</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">: Number,       </span><span style="color:#6A737D;">// 自增ID</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">: String,    </span><span style="color:#6A737D;">// 任务名称</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">completed</span><span style="color:#E1E4E8;">: Boolean </span><span style="color:#6A737D;">// 完成状态</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">: Number,       </span><span style="color:#6A737D;">// 自增ID</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">title</span><span style="color:#24292E;">: String,    </span><span style="color:#6A737D;">// 任务名称</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">completed</span><span style="color:#24292E;">: Boolean </span><span style="color:#6A737D;">// 完成状态</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li><li><p><strong>实现接口</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">路径</th><th style="text-align:left;">功能</th><th style="text-align:left;">状态码</th><th style="text-align:left;">验证规则</th></tr></thead><tbody><tr><td style="text-align:left;">GET</td><td style="text-align:left;">/tasks</td><td style="text-align:left;">获取所有任务</td><td style="text-align:left;">200</td><td style="text-align:left;">不作要求</td></tr><tr><td style="text-align:left;">POST</td><td style="text-align:left;">/tasks</td><td style="text-align:left;">创建新任务</td><td style="text-align:left;">201</td><td style="text-align:left;">验证是否为空</td></tr><tr><td style="text-align:left;">GET</td><td style="text-align:left;">/tasks/:id</td><td style="text-align:left;">获取单个任务</td><td style="text-align:left;">200/404</td><td style="text-align:left;">不作要求</td></tr><tr><td style="text-align:left;">PUT</td><td style="text-align:left;">/tasks/:id</td><td style="text-align:left;">更新任务</td><td style="text-align:left;">200/404</td><td style="text-align:left;">验证任务对象</td></tr><tr><td style="text-align:left;">DELETE</td><td style="text-align:left;">/tasks/:id</td><td style="text-align:left;">删除任务</td><td style="text-align:left;">204/404</td><td style="text-align:left;">不作要求</td></tr></tbody></table></li><li><p><strong>错误处理</strong></p><ul><li>无效请求返回 400 + JSON 错误信息</li><li>资源不存在返回 404 + JSON 错误信息</li><li>服务器错误返回 500</li></ul></li></ol><p>​ 完成后使用Apifox或者postman测试，打包你的代码并提交。</p><hr><h5 id="可能遇到的问题" tabindex="-1"><strong>可能遇到的问题</strong> <a class="header-anchor" href="#可能遇到的问题" aria-label="Permalink to &quot;**可能遇到的问题**&quot;">​</a></h5><p>我该怎么规范定义我的 API ？ 这里可以看看 <a href="https://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noreferrer">Restful API</a> 规范。</p><p><strong>Node.js入门教程</strong></p><ul><li><a href="https://dev.nodejs.cn/learn/" target="_blank" rel="noreferrer">学习教程 | Node中文网</a></li><li><a href="https://www.runoob.com/nodejs/" target="_blank" rel="noreferrer">Node.js 教程 | 菜鸟教程</a></li></ul><p><strong>很多同学可能发现Node.js和之前学习的JavaScript不太一样，大家可以参考下面两个链接</strong></p><ul><li><a href="https://dev.nodejs.cn/learn/how-much-javascript-do-you-need-to-know-to-use-nodejs/" target="_blank" rel="noreferrer">需要了解多少 JavaScript 才能使用 Node.js？</a></li><li><a href="https://dev.nodejs.cn/learn/differences-between-nodejs-and-the-browser/" target="_blank" rel="noreferrer">Node.js 和浏览器之间的区别?</a></li></ul><p><strong>express框架可以参考哪些教程？</strong></p><ul><li><a href="https://express.nodejs.cn/en/starter/installing.html" target="_blank" rel="noreferrer">Express 教程 |Node.js中文网 </a></li><li><a href="https://www.runoob.com/nodejs/nodejs-express-framework.html" target="_blank" rel="noreferrer">Node.js Express 框架 | 菜鸟教程</a></li><li>较难的问题可以参考B站上的视频教程</li></ul><h2 id="本题提交方式" tabindex="-1"><strong>本题提交方式</strong> <a class="header-anchor" href="#本题提交方式" aria-label="Permalink to &quot;**本题提交方式**&quot;">​</a></h2><blockquote><p><a href="https://submit.glimmer.org.cn" target="_blank" rel="noreferrer"> 提交点这里 </a></p></blockquote><h2 id="出题者q-a方式" tabindex="-1"><strong>出题者Q&amp;A方式</strong> <a class="header-anchor" href="#出题者q-a方式" aria-label="Permalink to &quot;**出题者Q&amp;A方式**&quot;">​</a></h2><blockquote><p>QQ：3064517736</p><p>邮箱：3064517736@qq.com</p></blockquote>`,35),o=[n];function p(r,i,d,c,h,g){return t(),s("div",null,o)}const f=e(a,[["render",p]]);export{u as __pageData,f as default};
