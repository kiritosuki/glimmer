import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.e90f0c97.js";const p="/assets/T9-2.aa1a6630.png",o="/assets/T9.bd00f235.png",b=JSON.parse('{"title":"T9.Vue的学习","description":"","frontmatter":{"prev":{"text":"T8.VitePress","link":"./T8.VitePress.html"},"next":false},"headers":[],"relativePath":"md/前端/T9.Vue的学习.md","filePath":"md/前端/T9.Vue的学习.md"}'),e={name:"md/前端/T9.Vue的学习.md"},t=l(`<p><img src="https://pic.imgdb.cn/item/64c4a5611ddac507cc058875.png" alt="img"></p><h1 id="t9-vue的学习" tabindex="-1">T9.Vue的学习 <a class="header-anchor" href="#t9-vue的学习" aria-label="Permalink to &quot;T9.Vue的学习&quot;">​</a></h1><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">难度系数：其实是简单</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">难度系数：其实是简单</span></span></code></pre></div><p>上一题我们了解了简单框架 vitepress , 现在我们学习热门的Vue框架。</p><p>Vue是一个易学易用，性能出色，适用场景丰富的 渐进式 JavaScript 框架, 在本体中, 我们将学习Vue, 并利用他完成一些简单的小项目。</p></blockquote><h2 id="任务" tabindex="-1"><strong>任务</strong> <a class="header-anchor" href="#任务" aria-label="Permalink to &quot;**任务**&quot;">​</a></h2><ul><li><p>学习Vue的基础用法，涵盖数据绑定、指令、事件处理、条件渲染、列表渲染、计算属性、组件通信、生命周期等等，详细教程见页尾。</p><p><strong>这将是你耗时最长的一步！</strong></p></li><li><p>创建一个Vue项目</p><blockquote><p>注意, 这里需要你创建一个Vue项目, 而不是在js文件中引入Vue</p><p>(上网搜搜创建Vue项目的教程)</p></blockquote></li></ul><h3 id="题目背景" tabindex="-1"><strong>题目背景</strong> <a class="header-anchor" href="#题目背景" aria-label="Permalink to &quot;**题目背景**&quot;">​</a></h3><blockquote><p>微光工作室的小鱼同学决定做一个<strong>钢板表面缺陷检测系统</strong>来参加设计大赛，他的任务是根据后端检测模型返回的数据，在原图片上把对应坐标的缺陷标记出来。在做完这个功能后，小组成员们突发奇想：机器检测的缺陷并不一定完整和权威，可不可以让用户来新增、删除、改正缺陷位置呢？</p><p>小鱼认真思考了这个问题：要让用户手动纠正或者添加缺陷位置信息，就需要用户精准地计算、输入坐标数据，操作起来实在是太复杂了。能不能让用户动动手指，在屏幕上用鼠标拖拽、自由画圈呢？</p></blockquote><p><strong>要求</strong>：根据本题已经给出的组合函数工具（下载和使用方法见下），编写一个画板软件，进行工具的功能测试，让小鱼放心地把这个功能加入到系统中。你需要在自己的组件中完成以下内容：</p><blockquote><p><strong><a href="/useDrawing.zip">本题文件点此下载</a></strong></p></blockquote><p><strong>仔细阅读文件后，在组件中引入文件</strong>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> useDrawing </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../composables/useDrawing.js&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 根据你的实际路径调整，这里我在src/下单独创建了一个&quot;composables&quot;文件夹。</span></span>
<span class="line"><span style="color:#6A737D;">//注意，以下引用只是举例，实际上一个组件需要的绘画工具不一定有这么多</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">grid</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">gridRef</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">colors</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">selectedColor</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">tool</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">startDrawing</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">draw</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">stopDrawing</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">resetGrid</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">setEraser</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">setBrush</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useDrawing</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//这里默认为组合式API，你也可以用其他方式引入</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> useDrawing </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../composables/useDrawing.js&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 根据你的实际路径调整，这里我在src/下单独创建了一个&quot;composables&quot;文件夹。</span></span>
<span class="line"><span style="color:#6A737D;">//注意，以下引用只是举例，实际上一个组件需要的绘画工具不一定有这么多</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">grid</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">gridRef</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">colors</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">selectedColor</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">tool</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">startDrawing</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">draw</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">stopDrawing</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">resetGrid</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">setEraser</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">setBrush</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useDrawing</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//这里默认为组合式API，你也可以用其他方式引入</span></span></code></pre></div><p><strong>完成绘画工具选择栏</strong>：提供单选工具，包含画笔、橡皮擦和重置画板</p><p><strong>完成颜色选择栏</strong>：点击像素将其颜色改为当前选中色。</p><p><strong>完成画布</strong>：如何渲染出一个像素画布？再思考一下需要同时绑定哪些事件？</p><ul><li><p><strong>附加任务</strong> (可以尝试):</p><ul><li>可以尝试一下引入网上的<strong>组件库</strong></li><li>做一些<strong>附加功能</strong>：在完成以上任务后，如果你想要制作更多功能，试着在函数工具中添加新的工具，并暴露给你的组件。</li><li><strong>响应式设计</strong></li></ul></li><li><p>最后, 将你的vue项目上传到github仓库中, 提交给我们。</p></li></ul><blockquote><p><strong>在经过Vue的学习后，你是否感受到了使用框架进行模块化开发的便利？试着了解更多的组件库（Element+，EChart等等），改造一下你的博客（如果有时间的话），让你的页面变得更加美观！</strong></p></blockquote><p>完成参考：</p><p>（没有附加功能的简易像素画板）</p><p><img src="`+p+'" alt=""></p><p>（还可以追求更多功能，参考下面的在线画布网站：）</p><p><img src="'+o+'" alt=""></p><h2 id="博客参考" tabindex="-1"><strong>博客参考</strong> <a class="header-anchor" href="#博客参考" aria-label="Permalink to &quot;**博客参考**&quot;">​</a></h2><ul><li><a href="https://cn.vuejs.org/" target="_blank" rel="noreferrer">Vue.js</a>(官方文档)</li><li><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH" target="_blank" rel="noreferrer">尚硅谷Vue2.0+Vue3.0全套教程</a></li><li><a href="https://www.bilibili.com/video/BV1HV4y1a7n4" target="_blank" rel="noreferrer">黑马程序员Vue2+Vue3教程</a></li></ul><h2 id="本题提交方式" tabindex="-1"><strong>本题提交方式</strong> <a class="header-anchor" href="#本题提交方式" aria-label="Permalink to &quot;**本题提交方式**&quot;">​</a></h2><blockquote><p><a href="https://submit.glimmer.org.cn" target="_blank" rel="noreferrer"> 提交点这里 </a></p></blockquote><h2 id="出题者q-a方式" tabindex="-1"><strong>出题者Q&amp;A方式</strong> <a class="header-anchor" href="#出题者q-a方式" aria-label="Permalink to &quot;**出题者Q&amp;A方式**&quot;">​</a></h2><blockquote><p>QQ：3064517736</p><p>邮箱：3064517736@qq.com</p></blockquote>',27),r=[t];function c(i,E,y,u,g,d){return a(),n("div",null,r)}const m=s(e,[["render",c]]);export{b as __pageData,m as default};
