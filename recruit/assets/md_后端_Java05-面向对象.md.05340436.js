import{_ as s}from"./chunks/后端.a161c499.js";import{_ as a,o as n,c as l,Q as p}from"./chunks/framework.e90f0c97.js";const m=JSON.parse('{"title":"Java05-面向对象基础","description":"","frontmatter":{"prev":{"text":"Java04-控制流","link":"./Java04-控制流.html"},"next":{"text":"Java06-封装继承与多态","link":"./Java06-封装继承与多态.html"}},"headers":[],"relativePath":"md/后端/Java05-面向对象.md","filePath":"md/后端/Java05-面向对象.md"}'),o={name:"md/后端/Java05-面向对象.md"},e=p('<p><img src="'+s+`" alt=""></p><h1 id="java05-面向对象基础" tabindex="-1">Java05-面向对象基础 <a class="header-anchor" href="#java05-面向对象基础" aria-label="Permalink to &quot;Java05-面向对象基础&quot;">​</a></h1><h2 id="task1-对象和类" tabindex="-1"><strong>Task1.对象和类</strong> <a class="header-anchor" href="#task1-对象和类" aria-label="Permalink to &quot;**Task1.对象和类**&quot;">​</a></h2><p>你有对象吗？如果你还没有对象，可以给自己new一个。</p><p>我们都知道Java是一门面向对象的语言，而C是面向过程的语言，那么究竟什么是面向对象编程（OOP）呢？</p><p>类和对象是Java中最基本的两个概念，先来看一个简单的Person类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> sex;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eat</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(name</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;正在吃东西&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dadoudou</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sex;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eat</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    	System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(name</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;正在吃东西&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dadoudou</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    	</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>一个类可以包含</p><ul><li>字段（也叫属性、成员变量）</li><li>方法</li><li>构造方法</li></ul><p>有了类作为模板，就可以实例化对象。</p><p>为了完成下面的要求，请你先创建一个java项目，该项目有一个主类（名字任意，里面有一个main函数作为程序入口），一个Person类，Person类的内容在上面已经给出。</p><ol><li>请你为这个Person类添加构造方法实现复制对象，并在题解附上你的Person类代码。你的构造方法用到this关键字了吗？请说说它的作用。</li><li>在主类的main方法中创建Person类的一个对象，并给它的字段赋值（可以用构造函数，也可以用引用变量）。说说对象和类的关系。</li></ol><p>就像真正的人有隐私不能让别人知道一样，对象也可以限制外界访问自己的属性和方法。</p><ol start="3"><li>学习访问修饰符，为你的Person类的字段和方法添加你认为合适的访问修饰符。尝试在不同的位置（当前类，相同包的其它类，包的外部等）访问这些字段和方法，并总结出各种访问修饰符的限制范围。</li></ol><h2 id="task2-类中的变量和方法" tabindex="-1"><strong>Task2.类中的变量和方法</strong> <a class="header-anchor" href="#task2-类中的变量和方法" aria-label="Permalink to &quot;**Task2.类中的变量和方法**&quot;">​</a></h2><p>在上面我们知道，一个类可以有成员变量，不同对象的成员变量之间是独立且互不干扰的，比如这个Person对象的变量name值为“ISEKAI”，另一个Person对象的变量name值则可能为“Zack”。但类也可以有公共的类变量，也叫静态变量。</p><p>同理，类中也有静态方法。回想之前调用Person类的eat方法时，是不是必须先创建对象，再使用对象来调用方法？其实这里的eat方法就叫做实例方法。</p><h2 id="本题提交方式" tabindex="-1"><strong>本题提交方式</strong> <a class="header-anchor" href="#本题提交方式" aria-label="Permalink to &quot;**本题提交方式**&quot;">​</a></h2><blockquote><p><a href="https://submit.glimmer.org.cn" target="_blank" rel="noreferrer"> 提交点这里 </a></p></blockquote><h2 id="出题人联系方式" tabindex="-1">出题人联系方式 <a class="header-anchor" href="#出题人联系方式" aria-label="Permalink to &quot;出题人联系方式&quot;">​</a></h2><blockquote><p><strong>出题人QQ：3425282590</strong></p></blockquote>`,21),t=[e];function r(c,E,i,y,d,v){return n(),l("div",null,t)}const _=a(o,[["render",r]]);export{m as __pageData,_ as default};
