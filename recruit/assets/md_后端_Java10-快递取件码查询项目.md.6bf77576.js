import{_ as s}from"./chunks/后端.a161c499.js";import{_ as n,o as a,c as l,Q as p}from"./chunks/framework.e90f0c97.js";const A=JSON.parse('{"title":"Java-10 项目挑战","description":"","frontmatter":{"prev":{"text":"java09-IO流","link":"./java09-IO流.html"},"next":false},"headers":[],"relativePath":"md/后端/Java10-快递取件码查询项目.md","filePath":"md/后端/Java10-快递取件码查询项目.md"}'),o={name:"md/后端/Java10-快递取件码查询项目.md"},e=p('<p><img src="'+s+`" alt=""></p><h1 id="java-10-项目挑战" tabindex="-1">Java-10 项目挑战 <a class="header-anchor" href="#java-10-项目挑战" aria-label="Permalink to &quot;Java-10 项目挑战&quot;">​</a></h1><h2 id="task1-maven" tabindex="-1">Task1.maven <a class="header-anchor" href="#task1-maven" aria-label="Permalink to &quot;Task1.maven&quot;">​</a></h2><h3 id="_1-什么是maven" tabindex="-1">1.什么是maven？ <a class="header-anchor" href="#_1-什么是maven" aria-label="Permalink to &quot;1.什么是maven？&quot;">​</a></h3><ol><li>请你自行上网查阅资料，了解一下什么是maven</li><li>什么是jar包？</li><li>maven和jar包有关系吗？有什么关系？</li><li>我们为什么要用maven？</li></ol><h3 id="_2-试着下载maven吧" tabindex="-1">2. 试着下载maven吧！ <a class="header-anchor" href="#_2-试着下载maven吧" aria-label="Permalink to &quot;2. 试着下载maven吧！&quot;">​</a></h3><ul><li>你的java环境配置好了吗？</li><li>别忘了配置环境变量</li><li>看看你的maven是什么版本</li></ul><h3 id="_3-什么是maven仓库" tabindex="-1">3.什么是maven仓库？ <a class="header-anchor" href="#_3-什么是maven仓库" aria-label="Permalink to &quot;3.什么是maven仓库？&quot;">​</a></h3><ol><li>怎么配置你自己的本地仓库位置？</li><li>需要的jar包本地仓库没有？让我们去看看远程仓库！</li><li>远程仓库不止一种！你知道中央仓库是什么吗？</li><li>私服又是什么？</li></ol><h3 id="_4-创建你自己的maven项目" tabindex="-1">4.创建你自己的maven项目！ <a class="header-anchor" href="#_4-创建你自己的maven项目" aria-label="Permalink to &quot;4.创建你自己的maven项目！&quot;">​</a></h3><ol><li>你的IDEA关联maven了吗？</li><li>一个maven项目都需要配置什么参数？你能说说看吗？</li><li>你的项目结构是什么样的？你知道你的代码、配置文件、测试代码、测试配置文件、maven项目配置文件都在哪里吗？</li><li>pom.xml文件？ <ol><li>这是什么？</li><li>它有什么用？</li><li>它的基本配置有哪些？</li><li>你能通过这个文件管理你的jar包版本、项目类型吗？</li></ol></li><li>怎么导入你需要的jar包？去找到答案吧！</li></ol><h3 id="_5-启动你的maven" tabindex="-1">5.启动你的maven！ <a class="header-anchor" href="#_5-启动你的maven" aria-label="Permalink to &quot;5.启动你的maven！&quot;">​</a></h3><ol><li>maven的常用命令有哪些你知道吗？</li><li>图形化界面是非常方便的，去观察IDEA中的maven面板，看看可以快速执行哪些maven指令吧！</li></ol><h3 id="_6-恭喜你-你已经对maven有初步的了解了-现在-向着最终项目进发吧" tabindex="-1">6.恭喜你~你已经对maven有初步的了解了！现在，向着最终项目进发吧！ <a class="header-anchor" href="#_6-恭喜你-你已经对maven有初步的了解了-现在-向着最终项目进发吧" aria-label="Permalink to &quot;6.恭喜你~你已经对maven有初步的了解了！现在，向着最终项目进发吧！&quot;">​</a></h3><h2 id="task2-快递取件码查询系统" tabindex="-1">Task2.快递取件码查询系统 <a class="header-anchor" href="#task2-快递取件码查询系统" aria-label="Permalink to &quot;Task2.快递取件码查询系统&quot;">​</a></h2><p>李华成功通过高考考进了UESTC，开学第一天他发现他的宿舍在校外，如果要拿快递的话要去到校内的菜鸟驿站，比较远。所以他决定手搓一个快递柜，请你帮他编写一个客户端和服务端的程序，实现通过快递单号查询取件码的功能。</p><h3 id="知识准备" tabindex="-1">知识准备 <a class="header-anchor" href="#知识准备" aria-label="Permalink to &quot;知识准备&quot;">​</a></h3><p><strong>maven</strong></p><p><strong>HTTP（HyperText Transfer Protocol）</strong>：应用层协议，用于客户端（浏览器/APP）与服务端之间的数据传输。</p><p>特点</p><ul><li>无状态（每个请求独立，默认不记录历史）</li><li>基于请求-响应模型</li><li>支持明文（HTTP）和加密（HTTPS）传输</li></ul><p>请求报文样例：</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">POST</span><span style="color:#E1E4E8;"> /login </span><span style="color:#F97583;">HTTP</span><span style="color:#E1E4E8;">/</span><span style="color:#79B8FF;">1.1</span></span>
<span class="line"><span style="color:#85E89D;">Host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">api.example.com</span></span>
<span class="line"><span style="color:#85E89D;">Content-Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">application/json</span></span>
<span class="line"><span style="color:#85E89D;">User-Agent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Mozilla/5.0</span></span>
<span class="line"><span style="color:#85E89D;">Content-Length</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">45</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">&quot;username&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;admin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;password&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;123456&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">POST</span><span style="color:#24292E;"> /login </span><span style="color:#D73A49;">HTTP</span><span style="color:#24292E;">/</span><span style="color:#005CC5;">1.1</span></span>
<span class="line"><span style="color:#22863A;">Host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">api.example.com</span></span>
<span class="line"><span style="color:#22863A;">Content-Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">application/json</span></span>
<span class="line"><span style="color:#22863A;">User-Agent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Mozilla/5.0</span></span>
<span class="line"><span style="color:#22863A;">Content-Length</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">45</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#005CC5;">&quot;username&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;admin&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;password&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;123456&quot;</span><span style="color:#24292E;">}</span></span></code></pre></div><p>响应报文样例：</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">HTTP/1.1 200 OK</span></span>
<span class="line"><span style="color:#85E89D;">Content-Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">application/json</span></span>
<span class="line"><span style="color:#85E89D;">Set-Cookie</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sessionid=abc123; Path=/</span></span>
<span class="line"><span style="color:#85E89D;">Content-Length</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">30</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">&quot;status&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;token&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;xyz&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">HTTP/1.1 200 OK</span></span>
<span class="line"><span style="color:#22863A;">Content-Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">application/json</span></span>
<span class="line"><span style="color:#22863A;">Set-Cookie</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sessionid=abc123; Path=/</span></span>
<span class="line"><span style="color:#22863A;">Content-Length</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">30</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#005CC5;">&quot;status&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;token&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;xyz&quot;</span><span style="color:#24292E;">}</span></span></code></pre></div><p><u>需要了解常见的请求方式，以及常见的响应状态码</u>（404 应该是最熟悉的状态码了）</p><p><strong>JSON数据格式</strong></p><p>json本质来说就是一个字符串，是一种轻量级的数据交换格式，易于人阅读和编写，也易于机器解析和生成。</p><p>类似Java中的HashMap，通过键值的匹配来读取数据</p><p>键名必须用双引号包裹，值的类型多种多样，还可以嵌套，例如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;key1&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;value1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;key2&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;key3&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;key4&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;key5&quot;</span><span style="color:#E1E4E8;">: { </span><span style="color:#79B8FF;">&quot;nestedKey&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;nestedValue&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;key6&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;key1&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;value1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;key2&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;key3&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;key4&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;key5&quot;</span><span style="color:#24292E;">: { </span><span style="color:#005CC5;">&quot;nestedKey&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;nestedValue&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;key6&quot;</span><span style="color:#24292E;">: [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果遇到很复杂的json字符串，还可以用这个网站帮助分析结构</p><p><a href="https://jsonformatter.curiousconcept.com/#" target="_blank" rel="noreferrer">JSON Formatter &amp; Validator (curiousconcept.com)</a></p><p>TCP/IP 通信</p><h3 id="项目实现" tabindex="-1">项目实现 <a class="header-anchor" href="#项目实现" aria-label="Permalink to &quot;项目实现&quot;">​</a></h3><h3 id="客户端" tabindex="-1">客户端 <a class="header-anchor" href="#客户端" aria-label="Permalink to &quot;客户端&quot;">​</a></h3><p>先要在pom.xml中导入解析json格式的依赖</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.alibaba&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;fastjson&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;2.0.51&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.alibaba&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;fastjson&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;2.0.51&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><strong>用fastjson构造json格式</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//fastjson这个库需要定义一个类作为映射</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> age;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 必须有无参构造函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 必须提供 getter/setter (Fastjson 依赖它们)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//然后通过给这个类实例化具体数据构建json</span></span>
<span class="line"><span style="color:#E1E4E8;">User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Alice&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">String json </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> JSON.</span><span style="color:#B392F0;">toJSONString</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#6A737D;">// 结果: {&quot;age&quot;:25,&quot;name&quot;:&quot;Alice&quot;}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//fastjson这个库需要定义一个类作为映射</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 必须有无参构造函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 必须提供 getter/setter (Fastjson 依赖它们)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//然后通过给这个类实例化具体数据构建json</span></span>
<span class="line"><span style="color:#24292E;">User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Alice&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">String json </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> JSON.</span><span style="color:#6F42C1;">toJSONString</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#6A737D;">// 结果: {&quot;age&quot;:25,&quot;name&quot;:&quot;Alice&quot;}</span></span></code></pre></div><p>解析json格式</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//{&quot;age&quot;:25,&quot;name&quot;:&quot;Alice&quot;}</span></span>
<span class="line"><span style="color:#E1E4E8;">String json </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">name</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">Alice</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">,</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">age</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">:25}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> JSON.</span><span style="color:#B392F0;">parseObject</span><span style="color:#E1E4E8;">(json, User.class);</span></span>
<span class="line"><span style="color:#6A737D;">//这时候user这个对象就保存了对应字段的内容</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//{&quot;age&quot;:25,&quot;name&quot;:&quot;Alice&quot;}</span></span>
<span class="line"><span style="color:#24292E;">String json </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">name</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">Alice</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">,</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">age</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">:25}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> JSON.</span><span style="color:#6F42C1;">parseObject</span><span style="color:#24292E;">(json, User.class);</span></span>
<span class="line"><span style="color:#6A737D;">//这时候user这个对象就保存了对应字段的内容</span></span></code></pre></div><p>代码实现部分</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.OutputStream;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.net.HttpURLConnection;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.net.URL;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.charset.StandardCharsets;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Scanner;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Client</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String SERVER_URL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://localhost:8000/query&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//读取用户输入的快递单号和手机号</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">                用fastjson这个依赖构造json格式，构造的样例为</span></span>
<span class="line"><span style="color:#6A737D;">                {&quot;trackingNumber&quot;:&quot;SF123456789&quot;,&quot;phone&quot;:&quot;19867653558&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">                */</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 将这个json格式的数据写入请求体并发送HTTP POST请求</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 读取响应，状态码是200才是响应成功</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (connection.</span><span style="color:#B392F0;">getResponseCode</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">                   解析服务端响应的json格式，拿到取件码，拿不到就显示msg的内容</span></span>
<span class="line"><span style="color:#6A737D;">                   样例：</span></span>
<span class="line"><span style="color:#6A737D;">                   例如：{&quot;pick_code&quot;:4096,&quot;msg&quot;:&quot;success&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">                   		{&quot;pick_code&quot;:null,&quot;msg&quot;:&quot;手机号不正确&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">                   */</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span></span>
<span class="line"><span style="color:#E1E4E8;">                   }</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;查询失败，状态码: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> connection.</span><span style="color:#B392F0;">getResponseCode</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;请求发生错误: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> e.</span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        scanner.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;客户端已退出&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.OutputStream;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.net.HttpURLConnection;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.net.URL;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.charset.StandardCharsets;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Scanner;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Client</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String SERVER_URL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://localhost:8000/query&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//读取用户输入的快递单号和手机号</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">                用fastjson这个依赖构造json格式，构造的样例为</span></span>
<span class="line"><span style="color:#6A737D;">                {&quot;trackingNumber&quot;:&quot;SF123456789&quot;,&quot;phone&quot;:&quot;19867653558&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">                */</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将这个json格式的数据写入请求体并发送HTTP POST请求</span></span>
<span class="line"><span style="color:#24292E;">                </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 读取响应，状态码是200才是响应成功</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (connection.</span><span style="color:#6F42C1;">getResponseCode</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">                   解析服务端响应的json格式，拿到取件码，拿不到就显示msg的内容</span></span>
<span class="line"><span style="color:#6A737D;">                   样例：</span></span>
<span class="line"><span style="color:#6A737D;">                   例如：{&quot;pick_code&quot;:4096,&quot;msg&quot;:&quot;success&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">                   		{&quot;pick_code&quot;:null,&quot;msg&quot;:&quot;手机号不正确&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">                   */</span></span>
<span class="line"><span style="color:#24292E;">                    </span></span>
<span class="line"><span style="color:#24292E;">                    </span></span>
<span class="line"><span style="color:#24292E;">                   }</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;查询失败，状态码: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">getResponseCode</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请求发生错误: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        scanner.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;客户端已退出&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="服务端" tabindex="-1">服务端 <a class="header-anchor" href="#服务端" aria-label="Permalink to &quot;服务端&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.sun.net.httpserver.HttpExchange;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.sun.net.httpserver.HttpHandler;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.sun.net.httpserver.HttpServer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.InputStream;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.io.OutputStream;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.net.InetSocketAddress;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.nio.charset.StandardCharsets;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.HashMap;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Map;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Scanner;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Server</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> PORT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; expressMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 初始化一些测试数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">initializeExpressData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建HTTP服务器，监听指定端口</span></span>
<span class="line"><span style="color:#E1E4E8;">        HttpServer server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> HttpServer.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InetSocketAddress</span><span style="color:#E1E4E8;">(PORT), </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 设置路由和处理程序</span></span>
<span class="line"><span style="color:#E1E4E8;">        server.</span><span style="color:#B392F0;">createContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/query&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">QueryHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 启动服务器</span></span>
<span class="line"><span style="color:#E1E4E8;">        server.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Server started on port &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> PORT);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initializeExpressData</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 添加一些测试数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//键的构成是  快递单号_手机号</span></span>
<span class="line"><span style="color:#E1E4E8;">        expressMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SF123456789_13005433678&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;1234&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        expressMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;JD987654321_19805433168&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;5678&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        expressMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;YT456789123_13905479698&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;9012&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        expressMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ZT789123456_18505433664&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;3456&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">QueryHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HttpHandler</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(HttpExchange </span><span style="color:#FFAB70;">exchange</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(exchange.</span><span style="color:#B392F0;">getRequestMethod</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 读取请求体</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 解析JSON请求（例如：{&quot;trackingNumber&quot;:&quot;SF123456789&quot;}）获得单号</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 在expressMap中查询取件码，</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">                    构建响应的json</span></span>
<span class="line"><span style="color:#6A737D;">                    例如：{&quot;pick_code&quot;:4096,&quot;msg&quot;:&quot;success&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">                    如果找不到快递则是{&quot;pick_code&quot;:null,&quot;msg&quot;:&quot;根据各种情况写提示信息&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">                    */</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 发送响应</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 处理异常，返回400状态码(Bad Request)</span></span>
<span class="line"><span style="color:#E1E4E8;">                   </span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 非POST请求返回405 Method Not Allowed</span></span>
<span class="line"><span style="color:#E1E4E8;">                exchange.</span><span style="color:#B392F0;">sendResponseHeaders</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">405</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.sun.net.httpserver.HttpExchange;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.sun.net.httpserver.HttpHandler;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.sun.net.httpserver.HttpServer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.InputStream;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.OutputStream;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.net.InetSocketAddress;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.nio.charset.StandardCharsets;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.HashMap;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Map;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Scanner;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Server</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> PORT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; expressMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 初始化一些测试数据</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">initializeExpressData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建HTTP服务器，监听指定端口</span></span>
<span class="line"><span style="color:#24292E;">        HttpServer server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> HttpServer.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InetSocketAddress</span><span style="color:#24292E;">(PORT), </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置路由和处理程序</span></span>
<span class="line"><span style="color:#24292E;">        server.</span><span style="color:#6F42C1;">createContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/query&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">QueryHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 启动服务器</span></span>
<span class="line"><span style="color:#24292E;">        server.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Server started on port &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> PORT);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initializeExpressData</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 添加一些测试数据</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//键的构成是  快递单号_手机号</span></span>
<span class="line"><span style="color:#24292E;">        expressMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SF123456789_13005433678&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;1234&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        expressMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;JD987654321_19805433168&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;5678&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        expressMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;YT456789123_13905479698&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;9012&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        expressMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ZT789123456_18505433664&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;3456&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">QueryHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HttpHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(HttpExchange </span><span style="color:#E36209;">exchange</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(exchange.</span><span style="color:#6F42C1;">getRequestMethod</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 读取请求体</span></span>
<span class="line"><span style="color:#24292E;">                </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 解析JSON请求（例如：{&quot;trackingNumber&quot;:&quot;SF123456789&quot;}）获得单号</span></span>
<span class="line"><span style="color:#24292E;">                    </span></span>
<span class="line"><span style="color:#24292E;">                    </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 在expressMap中查询取件码，</span></span>
<span class="line"><span style="color:#24292E;">                    </span></span>
<span class="line"><span style="color:#24292E;">                    </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">                    构建响应的json</span></span>
<span class="line"><span style="color:#6A737D;">                    例如：{&quot;pick_code&quot;:4096,&quot;msg&quot;:&quot;success&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">                    如果找不到快递则是{&quot;pick_code&quot;:null,&quot;msg&quot;:&quot;根据各种情况写提示信息&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">                    */</span></span>
<span class="line"><span style="color:#24292E;">                    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 发送响应</span></span>
<span class="line"><span style="color:#24292E;">                    </span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 处理异常，返回400状态码(Bad Request)</span></span>
<span class="line"><span style="color:#24292E;">                   </span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 非POST请求返回405 Method Not Allowed</span></span>
<span class="line"><span style="color:#24292E;">                exchange.</span><span style="color:#6F42C1;">sendResponseHeaders</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">405</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="本题提交方式" tabindex="-1"><strong>本题提交方式</strong> <a class="header-anchor" href="#本题提交方式" aria-label="Permalink to &quot;**本题提交方式**&quot;">​</a></h2><blockquote><p><a href="https://submit.glimmer.org.cn" target="_blank" rel="noreferrer"> 提交点这里 </a></p></blockquote><h2 id="出题人联系方式" tabindex="-1">出题人联系方式 <a class="header-anchor" href="#出题人联系方式" aria-label="Permalink to &quot;出题人联系方式&quot;">​</a></h2><blockquote><p><strong>出题人QQ：1507015236</strong></p></blockquote>`,50),t=[e];function c(r,E,y,i,u,F){return a(),l("div",null,t)}const h=n(o,[["render",c]]);export{A as __pageData,h as default};
