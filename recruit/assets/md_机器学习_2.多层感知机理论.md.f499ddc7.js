import{_ as s}from"./chunks/9olqLl7-x6XtWyNUssHvLGkRzM5cj2_KAPAYU4vaHIw.9541447f.js";import{_ as a,o as n,c as l,Q as p}from"./chunks/framework.e90f0c97.js";const _=JSON.parse('{"title":"2: 多层感知机理论","description":"","frontmatter":{"prev":{"text":"1.基础的线性回归","link":"./1.基础的线性回归.md"},"next":{"text":"3.多层感知机实战","link":"./3.多层感知机实战.md"}},"headers":[],"relativePath":"md/机器学习/2.多层感知机理论.md","filePath":"md/机器学习/2.多层感知机理论.md"}'),o={name:"md/机器学习/2.多层感知机理论.md"},e=p('<p><img src="'+s+`" alt="9olqLl7-x6XtWyNUssHvLGkRzM5cj2_KAPAYU4vaHIw"></p><h1 id="_2-多层感知机理论" tabindex="-1">2: 多层感知机理论 <a class="header-anchor" href="#_2-多层感知机理论" aria-label="Permalink to &quot;2: 多层感知机理论&quot;">​</a></h1><h2 id="🌟-欢迎来到神经网络的核心世界" tabindex="-1">🌟 欢迎来到神经网络的核心世界！ <a class="header-anchor" href="#🌟-欢迎来到神经网络的核心世界" aria-label="Permalink to &quot;🌟 欢迎来到神经网络的核心世界！&quot;">​</a></h2><p>你将开启深度学习之旅的关键一步——掌握多层感知机(MLP)​的理论基础！作为神经网络的基石，MLP不仅是最简单的深度学习模型，更是理解更复杂架构（如CNN、RNN）的钥匙。</p><h2 id="📚1解释下列概念" tabindex="-1">📚1解释下列概念： <a class="header-anchor" href="#📚1解释下列概念" aria-label="Permalink to &quot;📚1解释下列概念：&quot;">​</a></h2><ol><li><p>隐藏层，激活函数，全连接层</p></li><li><p>过拟合，欠拟合，暂退法，权重衰减</p></li><li><p>前向传播，反向传播，梯度爆炸，梯度消失</p></li></ol><p>建议回答加上一些图片，多加入自己的理解，不要简单的复制粘贴</p><h2 id="📦2回答问题" tabindex="-1">📦2回答问题： <a class="header-anchor" href="#📦2回答问题" aria-label="Permalink to &quot;📦2回答问题：&quot;">​</a></h2><ol><li><p>为什么单层感知机无法解决异或问题？MLP如何解决</p></li><li><p>给定输入维度d，隐藏层维度h，输出维度o (1)参数数量是多少？(注意偏置参数)</p><p>(2)根据参数量，计算以Float32，INT8方式存储的情况下参数所占内存空间？</p><p>(3)前向传播的计算复杂度是？</p></li><li><p>比较不同激活函数：ReLU vs Sigmoid vs Tanh</p><p>(1)梯度特性对比</p><p>(2)死ReLU问题分析</p><p>(3)sigmoid的计算比较复杂，请分析在前向传播和反向传播中通常会采用什么方法简化计算？</p></li><li><p>暂退法如何防止过拟合</p></li></ol><h2 id="🔥3动手实现mlp基础架构" tabindex="-1">🔥3动手实现MLP基础架构： <a class="header-anchor" href="#🔥3动手实现mlp基础架构" aria-label="Permalink to &quot;🔥3动手实现MLP基础架构：&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MLP</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">nn</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, input_size, hidden_size, output_size):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        初始化多层感知机</span></span>
<span class="line"><span style="color:#9ECBFF;">        input_size: 输入特征维度</span></span>
<span class="line"><span style="color:#9ECBFF;">        hidden_size: 隐藏状态维度  </span></span>
<span class="line"><span style="color:#9ECBFF;">        output_size: 输出维度</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">relu</span><span style="color:#E1E4E8;">(self, x):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;激活函数实现</span></span>
<span class="line"><span style="color:#9ECBFF;">           这里只给出了relu</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">forward</span><span style="color:#E1E4E8;">(self, X):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;前向传播实现&quot;&quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MLP</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">nn</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, input_size, hidden_size, output_size):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        初始化多层感知机</span></span>
<span class="line"><span style="color:#032F62;">        input_size: 输入特征维度</span></span>
<span class="line"><span style="color:#032F62;">        hidden_size: 隐藏状态维度  </span></span>
<span class="line"><span style="color:#032F62;">        output_size: 输出维度</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">relu</span><span style="color:#24292E;">(self, x):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;激活函数实现</span></span>
<span class="line"><span style="color:#032F62;">           这里只给出了relu</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">forward</span><span style="color:#24292E;">(self, X):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;前向传播实现&quot;&quot;&quot;</span></span></code></pre></div><h2 id="📚4简单的mlp实验" tabindex="-1">📚4简单的MLP实验： <a class="header-anchor" href="#📚4简单的mlp实验" aria-label="Permalink to &quot;📚4简单的MLP实验：&quot;">​</a></h2><p>二分类边界：圆形数据分离​</p><p>​实验目标​：生成内外两个圆形分布的数据点，训练MLP划分边界。</p><p>​关键步骤​：生成数据：内圆（半径&lt;0.4，标签0），外圆（半径&gt;0.6，标签1）</p><p>使用单隐藏层</p><p><em><strong>可视化</strong></em>训练后权重对决策边界的影响</p><p>​预期效果​：验证简单隐藏层处理圆形边界的能力。</p><ol><li><p>生成一个人造数据集</p></li><li><p>使用你自己写的MLP进行训练</p></li></ol><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generate_circles</span><span style="color:#E1E4E8;">(n_samples</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">, noise</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0.05</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;随机生成圆形数据集&quot;&quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generate_circles</span><span style="color:#24292E;">(n_samples</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">, noise</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.05</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;随机生成圆形数据集&quot;&quot;&quot;</span></span></code></pre></div><ol start="3"><li><strong>训练完成之后统计参数的分布情况（画出频率分布图）</strong></li></ol><h3 id="🎉5让你的模型效果更好" tabindex="-1">🎉5让你的模型效果更好 <a class="header-anchor" href="#🎉5让你的模型效果更好" aria-label="Permalink to &quot;🎉5让你的模型效果更好&quot;">​</a></h3><ol><li><p><strong>深度与宽度</strong>：</p><ul><li><p>分析增加深度 vs 增加宽度的效果</p></li><li><p>计算效率对比</p></li></ul></li><li><p><strong>初始化方法</strong>：</p><ul><li><p>零初始化的问题</p></li><li><p>Xavier初始化原理</p></li><li><p>He初始化的优势</p></li></ul></li><li><p><strong>优化困境分析</strong>：</p><ul><li><p>局部最优与鞍点问题</p></li><li><p>学习率设置策略</p></li><li><p>批量大小的影响</p></li></ul></li></ol><h2 id="⚠️注意事项" tabindex="-1">⚠️注意事项： <a class="header-anchor" href="#⚠️注意事项" aria-label="Permalink to &quot;⚠️注意事项：&quot;">​</a></h2><p>可以合理借助AI，但是不能照抄，必须要有自己的理解</p><h2 id="提交要求" tabindex="-1">提交要求 <a class="header-anchor" href="#提交要求" aria-label="Permalink to &quot;提交要求&quot;">​</a></h2><h3 id="提交内容" tabindex="-1">提交内容 <a class="header-anchor" href="#提交内容" aria-label="Permalink to &quot;提交内容&quot;">​</a></h3><ul><li><p><strong>代码文件</strong></p><p>：将代码部分的.ipynb文件作为邮件附件，命名格式：<code>ml-02-姓名-学号.ipynb</code></p></li><li><p><strong>文档报告</strong></p><p>：将写有这道题目文本解答的.md文件作为邮件附件，命名格式：<code>ml-02-姓名-学号.md</code></p></li><li><p>将两个文件压缩成压缩包<code>ml-02-姓名-学号.zip</code>提交</p></li></ul><h3 id="提交方式" tabindex="-1">提交方式 <a class="header-anchor" href="#提交方式" aria-label="Permalink to &quot;提交方式&quot;">​</a></h3><ul><li><p><strong>邮箱</strong>: <code>gimmerml401@163.com</code></p></li><li><p><strong>主题</strong>: <code>2-姓名-学号</code></p></li></ul><blockquote><p>出题人：鹁霖</p><p>QQ：2046193615</p></blockquote>`,31),t=[e];function c(r,i,u,y,d,E){return n(),l("div",null,t)}const F=a(o,[["render",c]]);export{_ as __pageData,F as default};
