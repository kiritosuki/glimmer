import{_ as l}from"./chunks/9olqLl7-x6XtWyNUssHvLGkRzM5cj2_KAPAYU4vaHIw.9541447f.js";import{_ as e,o as p,c as t,Q as a,k as s,a as n}from"./chunks/framework.e90f0c97.js";const D=JSON.parse('{"title":"6: 循环神经网络理论","description":"","frontmatter":{"prev":{"text":"5.卷积神经网络实战","link":"./5.卷积神经网络实战.md"},"next":{"text":"7.循环神经网络实战","link":"./7.循环神经网络实战.md"}},"headers":[],"relativePath":"md/机器学习/6.循环神经网络理论.md","filePath":"md/机器学习/6.循环神经网络理论.md"}'),o={name:"md/机器学习/6.循环神经网络理论.md"},r=a('<p><img src="'+l+'" alt="9olqLl7-x6XtWyNUssHvLGkRzM5cj2_KAPAYU4vaHIw"></p><h1 id="_6-循环神经网络理论" tabindex="-1">6: 循环神经网络理论 <a class="header-anchor" href="#_6-循环神经网络理论" aria-label="Permalink to &quot;6: 循环神经网络理论&quot;">​</a></h1><p>欢迎来到循环神经网络（RNN）的精彩世界！🎉 作为人工智能领域的重要组成部分，RNN是处理序列数据的利器——从语言翻译到股票预测，从语音识别到音乐生成，RNN的身影无处不在。</p><blockquote><p>💡 <strong>学习提示</strong>：不要被复杂的数学公式吓到！每一个概念都有其直观的解释，我们会一步步引导你理解。记住，最伟大的AI专家也是从基础开始学习的！</p></blockquote><h2 id="📚-参考资料" tabindex="-1">📚 参考资料 <a class="header-anchor" href="#📚-参考资料" aria-label="Permalink to &quot;📚 参考资料&quot;">​</a></h2><ul><li>主要参考：<a href="https://zh-v2.d2l.ai/chapter_recurrent-neural-networks/index.html" target="_blank" rel="noreferrer">《动手学深度学习》</a></li><li>🤖 <strong>友情提示</strong>：适度使用AI工具来辅助理解概念是完全可以的！</li></ul><hr><h2 id="🎯-第一部分-核心概念掌握-理论基础" tabindex="-1">🎯 第一部分：核心概念掌握（理论基础） <a class="header-anchor" href="#🎯-第一部分-核心概念掌握-理论基础" aria-label="Permalink to &quot;🎯 第一部分：核心概念掌握（理论基础）&quot;">​</a></h2><h3 id="学习并解释下列概念" tabindex="-1">学习并解释下列概念 <a class="header-anchor" href="#学习并解释下列概念" aria-label="Permalink to &quot;学习并解释下列概念&quot;">​</a></h3><p>让我们从基础开始，逐步建立对RNN的完整认知：</p><ol><li><p><strong>循环神经网络的基本架构</strong></p><ul><li>🔍 思考：为什么叫&quot;循环&quot;？它和普通神经网络有什么不同？</li></ul></li><li><p><strong>关键概念深度理解</strong></p><ul><li>隐藏状态（Hidden State）- RNN的&quot;记忆&quot;</li><li>时间依赖性（Temporal Dependencies）- 时间序列的魅力</li><li>梯度消失问题（Vanishing Gradient）- 长期记忆的挑战</li><li>梯度爆炸问题（Exploding Gradient）- 训练的另一个陷阱</li></ul></li><li><p><strong>进阶架构探索</strong></p><ul><li>双向RNN（Bidirectional RNN）- 看向过去和未来</li><li>深层RNN（Deep RNN）- 层层递进的智慧</li><li>Seq2Seq模型 - 序列到序列的魔法</li></ul></li><li><p><strong>门控机制的智慧</strong></p><ul><li>LSTM门控机制：遗忘门、输入门、输出门 - 精确控制信息流</li><li>GRU简化门控 - 优雅的简化方案</li></ul></li></ol><blockquote><p><strong>创意加分</strong>：强烈建议在解释中插入一些图片和你自己的理解与思考！用你的方式来诠释这些概念，让学习变得生动有趣。</p></blockquote><hr><h2 id="🤔-第二部分-深度思考-问题解答" tabindex="-1">🤔 第二部分：深度思考（问题解答） <a class="header-anchor" href="#🤔-第二部分-深度思考-问题解答" aria-label="Permalink to &quot;🤔 第二部分：深度思考（问题解答）&quot;">​</a></h2><h3 id="回答以下问题" tabindex="-1">回答以下问题 <a class="header-anchor" href="#回答以下问题" aria-label="Permalink to &quot;回答以下问题&quot;">​</a></h3><p>这些问题将帮助你从不同角度深入理解RNN：</p><ol><li><p><strong>根本问题探讨</strong> 为什么传统的全连接网络不适合处理序列数据？RNN是如何巧妙地解决这个问题的？</p></li><li><p><strong>架构对比分析</strong> 比较RNN、LSTM、GRU三种架构的特点：</p><p>a) 各自的参数量关系 - 复杂度的权衡</p><p>b) 计算复杂度比较 - 效率的考量</p><p>c) 适用场景分析 - 实际应用的智慧选择</p></li><li><p><strong>双向RNN深度分析</strong> 分析双向RNN相比单向RNN的优势和劣势，什么情况下不能使用双向RNN？</p></li></ol><blockquote><p>💪 <strong>挑战自己</strong>：尝试用自己的话来解释这些概念，就像在向朋友介绍一样！</p></blockquote><hr><h2 id="🧮-第三部分-数学之美-推导练习" tabindex="-1">🧮 第三部分：数学之美（推导练习） <a class="header-anchor" href="#🧮-第三部分-数学之美-推导练习" aria-label="Permalink to &quot;🧮 第三部分：数学之美（推导练习）&quot;">​</a></h2><h3 id="梯度消失问题的数学分析" tabindex="-1">梯度消失问题的数学分析 <a class="header-anchor" href="#梯度消失问题的数学分析" aria-label="Permalink to &quot;梯度消失问题的数学分析&quot;">​</a></h3><p>不要害怕数学公式！它们是理解RNN工作原理的钥匙</p><p>给定标准 RNN 的前向传播方程：</p>',23),c=s("p",null,[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"h"),s("mi",null,"t")]),s("mo",null,"="),s("mi",null,"tanh"),s("mo",{fence:"true"},"("),s("msub",null,[s("mi",null,"W"),s("mrow",null,[s("mi",null,"h"),s("mi",null,"h")])]),s("msub",null,[s("mi",null,"h"),s("mrow",null,[s("mi",null,"t"),s("mo",null,"−"),s("mn",null,"1")])]),s("mo",null,"+"),s("msub",null,[s("mi",null,"W"),s("mrow",null,[s("mi",null,"x"),s("mi",null,"h")])]),s("msub",null,[s("mi",null,"x"),s("mi",null,"t")]),s("mo",null,"+"),s("msub",null,[s("mi",null,"b"),s("mi",null,"h")]),s("mo",{fence:"true"},")")]),s("annotation",{encoding:"application/x-tex"},"h_t = \\tanh \\bigl(W_{hh} h_{t-1} + W_{xh} x_t + b_h \\bigr) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.85em"}}),s("span",{class:"strut bottom",style:{height:"1.20001em","vertical-align":"-0.35001em"}}),s("span",{class:"base displaystyle textstyle uncramped"},[s("span",{class:"mord"},[s("span",{class:"mord mathit"},"h"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"0em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"t")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),n("​")])])]),s("span",{class:"mrel"},"="),s("span",{class:"mop"},"tanh"),s("span",{class:"mopen"},[s("span",{class:"style-wrap reset-textstyle textstyle uncramped"},[s("span",{class:"delimsizing size1"},"(")])]),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.13889em"}},"W"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.13889em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord scriptstyle cramped"},[s("span",{class:"mord mathit"},"h"),s("span",{class:"mord mathit"},"h")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),n("​")])])]),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"h"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"0em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord scriptstyle cramped"},[s("span",{class:"mord mathit"},"t"),s("span",{class:"mbin"},"−"),s("span",{class:"mord mathrm"},"1")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),n("​")])])]),s("span",{class:"mbin"},"+"),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.13889em"}},"W"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.13889em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord scriptstyle cramped"},[s("span",{class:"mord mathit"},"x"),s("span",{class:"mord mathit"},"h")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),n("​")])])]),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"x"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"0em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"t")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),n("​")])])]),s("span",{class:"mbin"},"+"),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"b"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"0em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"h")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),n("​")])])]),s("span",{class:"mclose"},[s("span",{class:"style-wrap reset-textstyle textstyle uncramped"},[s("span",{class:"delimsizing size1"},")")])])])])])])],-1),i=s("p",null,[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"y"),s("mi",null,"t")]),s("mo",null,"="),s("msub",null,[s("mi",null,"W"),s("mrow",null,[s("mi",null,"h"),s("mi",null,"y")])]),s("msub",null,[s("mi",null,"h"),s("mi",null,"t")]),s("mo",null,"+"),s("msub",null,[s("mi",null,"b"),s("mi",null,"y")])]),s("annotation",{encoding:"application/x-tex"},"y_t = W_{hy} h_t + b_y ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.69444em"}}),s("span",{class:"strut bottom",style:{height:"0.980548em","vertical-align":"-0.286108em"}}),s("span",{class:"base displaystyle textstyle uncramped"},[s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.03588em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"t")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),n("​")])])]),s("span",{class:"mrel"},"="),s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.13889em"}},"W"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.13889em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord scriptstyle cramped"},[s("span",{class:"mord mathit"},"h"),s("span",{class:"mord mathit",style:{"margin-right":"0.03588em"}},"y")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),n("​")])])]),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"h"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"0em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit"},"t")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),n("​")])])]),s("span",{class:"mbin"},"+"),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"b"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"0em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.03588em"}},"y")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),n("​")])])])])])])])],-1),y=s("p",null,[s("strong",null,"你的任务"),n("：")],-1),u=s("ol",null,[s("li",null,[s("p",null,[s("strong",null,"梯度传播公式推导"),n(" 推导从时刻t到时刻k(k<t)的梯度传播公式 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mfrac",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"∂"),s("msub",null,[s("mi",null,"h"),s("mi",null,"t")])]),s("mrow",null,[s("mi",{mathvariant:"normal"},"∂"),s("msub",null,[s("mi",null,"h"),s("mi",null,"k")])])])]),s("annotation",{encoding:"application/x-tex"},"\\frac{\\partial h_t}{\\partial h_k}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.9011079999999999em"}}),s("span",{class:"strut bottom",style:{height:"1.3519679999999998em","vertical-align":"-0.4508599999999999em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord reset-textstyle textstyle uncramped"},[s("span",{class:"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist"},[s("span",{style:{top:"0.345em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord scriptstyle cramped"},[s("span",{class:"mord mathrm",style:{"margin-right":"0.05556em"}},"∂"),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"h"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15122857142857138em","margin-right":"0.07142857142857144em","margin-left":"0em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-scriptstyle scriptscriptstyle cramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.03148em"}},"k")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),n("​")])])])])])]),s("span",{style:{top:"-0.22999999999999998em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle textstyle uncramped frac-line"})]),s("span",{style:{top:"-0.4149999999999999em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle uncramped"},[s("span",{class:"mord scriptstyle uncramped"},[s("span",{class:"mord mathrm",style:{"margin-right":"0.05556em"}},"∂"),s("span",{class:"mord"},[s("span",{class:"mord mathit"},"h"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.07142857142857144em","margin-left":"0em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-scriptstyle scriptscriptstyle cramped"},[s("span",{class:"mord mathit"},"t")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),n("​")])])])])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),n("​")])])]),s("span",{class:"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"})])])])])]),s("blockquote",null,[s("p",null,[s("strong",null,"提交方式"),n("：可以手写后拍照上传，也可以使用LaTeX格式（LaTeX格式为加分项哦！）")])])]),s("li",null,[s("p",null,[s("strong",null,"条件分析"),n(" 分析什么条件下会出现梯度消失，什么条件下会出现梯度爆炸")])]),s("li",null,[s("p",null,[s("strong",null,"LSTM优势解释"),n(" 简单说明为什么LSTM能够缓解梯度消失问题")])])],-1),m=a(`<blockquote><p>🌟 <strong>学习心得</strong>：数学推导可能看起来复杂，但它能帮你真正理解RNN的工作机制。每一步推导都是在揭示算法的内在逻辑！</p></blockquote><hr><h2 id="💻-第四部分-动手实践-编程实现" tabindex="-1">💻 第四部分：动手实践（编程实现） <a class="header-anchor" href="#💻-第四部分-动手实践-编程实现" aria-label="Permalink to &quot;💻 第四部分：动手实践（编程实现）&quot;">​</a></h2><h3 id="使用纯python-numpy实现" tabindex="-1">使用纯Python+Numpy实现 <a class="header-anchor" href="#使用纯python-numpy实现" aria-label="Permalink to &quot;使用纯Python+Numpy实现&quot;">​</a></h3><p>现在是最激动人心的部分——从零开始构建你自己的RNN！🚀</p><h4 id="基础rnn类实现" tabindex="-1"><strong>基础RNN类实现</strong> <a class="header-anchor" href="#基础rnn类实现" aria-label="Permalink to &quot;**基础RNN类实现**&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> numpy </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> np</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleRNN</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, input_size, hidden_size, output_size):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        初始化RNN参数</span></span>
<span class="line"><span style="color:#9ECBFF;">        input_size: 输入特征维度</span></span>
<span class="line"><span style="color:#9ECBFF;">        hidden_size: 隐藏状态维度  </span></span>
<span class="line"><span style="color:#9ECBFF;">        output_size: 输出维度</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># </span><span style="color:#F97583;">TODO</span><span style="color:#6A737D;">: 初始化权重矩阵和偏置</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 提示：考虑Xavier或He初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">forward</span><span style="color:#E1E4E8;">(self, inputs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        前向传播</span></span>
<span class="line"><span style="color:#9ECBFF;">        inputs: shape (seq_len, batch_size, input_size)</span></span>
<span class="line"><span style="color:#9ECBFF;">        return: outputs, hidden_states</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># </span><span style="color:#F97583;">TODO</span><span style="color:#6A737D;">: 实现前向传播</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 返回所有时间步的输出和隐藏状态</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backward</span><span style="color:#E1E4E8;">(self, d_outputs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        反向传播 - 通过时间反向传播(BPTT)</span></span>
<span class="line"><span style="color:#9ECBFF;">        d_outputs: 输出层的梯度</span></span>
<span class="line"><span style="color:#9ECBFF;">        return: 各参数的梯度</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># </span><span style="color:#F97583;">TODO</span><span style="color:#6A737D;">: 实现BPTT算法</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 计算所有参数的梯度</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update_parameters</span><span style="color:#E1E4E8;">(self, learning_rate):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        参数更新</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># </span><span style="color:#F97583;">TODO</span><span style="color:#6A737D;">: 使用计算得到的梯度更新参数</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> numpy </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> np</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleRNN</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, input_size, hidden_size, output_size):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        初始化RNN参数</span></span>
<span class="line"><span style="color:#032F62;">        input_size: 输入特征维度</span></span>
<span class="line"><span style="color:#032F62;">        hidden_size: 隐藏状态维度  </span></span>
<span class="line"><span style="color:#032F62;">        output_size: 输出维度</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># </span><span style="color:#D73A49;">TODO</span><span style="color:#6A737D;">: 初始化权重矩阵和偏置</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 提示：考虑Xavier或He初始化</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">forward</span><span style="color:#24292E;">(self, inputs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        前向传播</span></span>
<span class="line"><span style="color:#032F62;">        inputs: shape (seq_len, batch_size, input_size)</span></span>
<span class="line"><span style="color:#032F62;">        return: outputs, hidden_states</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># </span><span style="color:#D73A49;">TODO</span><span style="color:#6A737D;">: 实现前向传播</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 返回所有时间步的输出和隐藏状态</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backward</span><span style="color:#24292E;">(self, d_outputs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        反向传播 - 通过时间反向传播(BPTT)</span></span>
<span class="line"><span style="color:#032F62;">        d_outputs: 输出层的梯度</span></span>
<span class="line"><span style="color:#032F62;">        return: 各参数的梯度</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># </span><span style="color:#D73A49;">TODO</span><span style="color:#6A737D;">: 实现BPTT算法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 计算所有参数的梯度</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update_parameters</span><span style="color:#24292E;">(self, learning_rate):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        参数更新</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># </span><span style="color:#D73A49;">TODO</span><span style="color:#6A737D;">: 使用计算得到的梯度更新参数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span></code></pre></div><h4 id="lstm单元实现" tabindex="-1"><strong>LSTM单元实现</strong> <a class="header-anchor" href="#lstm单元实现" aria-label="Permalink to &quot;**LSTM单元实现**&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LSTMCell</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, input_size, hidden_size):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        LSTM单元初始化</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># </span><span style="color:#F97583;">TODO</span><span style="color:#6A737D;">: 初始化LSTM的四个门的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 遗忘门、输入门、候选记忆、输出门</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 每个门都需要权重矩阵和偏置：</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># - 输入权重: [input_size, hidden_size]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># - 隐藏状态权重: [hidden_size, hidden_size]  </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># - 偏置: [hidden_size]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">forward</span><span style="color:#E1E4E8;">(self, input_t, hidden_state, cell_state):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        LSTM单元前向传播</span></span>
<span class="line"><span style="color:#9ECBFF;">        input_t: 当前时间步输入 [batch_size, input_size]</span></span>
<span class="line"><span style="color:#9ECBFF;">        hidden_state: 前一时间步隐藏状态 [batch_size, hidden_size]</span></span>
<span class="line"><span style="color:#9ECBFF;">        cell_state: 前一时间步细胞状态 [batch_size, hidden_size]</span></span>
<span class="line"><span style="color:#9ECBFF;">        return: new_hidden_state, new_cell_state</span></span>
<span class="line"><span style="color:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># </span><span style="color:#F97583;">TODO</span><span style="color:#6A737D;">: 实现LSTM单元的前向传播</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 1. 计算遗忘门、输入门、输出门的值（sigmoid激活）</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 2. 计算候选记忆元状态（tanh激活）</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 3. 更新记忆元状态</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 4. 计算输出隐藏状态</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LSTMCell</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, input_size, hidden_size):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        LSTM单元初始化</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># </span><span style="color:#D73A49;">TODO</span><span style="color:#6A737D;">: 初始化LSTM的四个门的参数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 遗忘门、输入门、候选记忆、输出门</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 每个门都需要权重矩阵和偏置：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># - 输入权重: [input_size, hidden_size]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># - 隐藏状态权重: [hidden_size, hidden_size]  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># - 偏置: [hidden_size]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">forward</span><span style="color:#24292E;">(self, input_t, hidden_state, cell_state):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        LSTM单元前向传播</span></span>
<span class="line"><span style="color:#032F62;">        input_t: 当前时间步输入 [batch_size, input_size]</span></span>
<span class="line"><span style="color:#032F62;">        hidden_state: 前一时间步隐藏状态 [batch_size, hidden_size]</span></span>
<span class="line"><span style="color:#032F62;">        cell_state: 前一时间步细胞状态 [batch_size, hidden_size]</span></span>
<span class="line"><span style="color:#032F62;">        return: new_hidden_state, new_cell_state</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># </span><span style="color:#D73A49;">TODO</span><span style="color:#6A737D;">: 实现LSTM单元的前向传播</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 1. 计算遗忘门、输入门、输出门的值（sigmoid激活）</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 2. 计算候选记忆元状态（tanh激活）</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 3. 更新记忆元状态</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 4. 计算输出隐藏状态</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span></code></pre></div><blockquote><p>🎯 <strong>编程小贴士</strong>：不要一次性写完所有代码！建议先实现基本框架，然后逐步完善每个函数。记住，调试是编程的重要组成部分！</p></blockquote><hr><h2 id="🔬-第五部分-实验验证-项目实战" tabindex="-1">🔬 第五部分：实验验证（项目实战） <a class="header-anchor" href="#🔬-第五部分-实验验证-项目实战" aria-label="Permalink to &quot;🔬 第五部分：实验验证（项目实战）&quot;">​</a></h2><h3 id="序列预测任务" tabindex="-1">序列预测任务 <a class="header-anchor" href="#序列预测任务" aria-label="Permalink to &quot;序列预测任务&quot;">​</a></h3><p>用你亲手实现的RNN来完成一个有趣的序列预测任务！</p><p><strong>实验步骤</strong>：</p><ol><li><strong>数据生成</strong>：生成一个特定的数学序列（如斐波那契数列、正弦波等）</li><li><strong>模型训练</strong>：使用你的RNN模型进行训练</li><li><strong>效果测试</strong>：测试模型的预测效果</li><li><strong>性能分析</strong>：分析不同序列长度对性能的影响</li></ol><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generate_sequence_data</span><span style="color:#E1E4E8;">(seq_type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;fibonacci&#39;</span><span style="color:#E1E4E8;">, length</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    生成序列数据</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># </span><span style="color:#F97583;">TODO</span><span style="color:#6A737D;">: 实现序列数据生成</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">train_rnn_on_sequence</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    训练RNN进行序列预测</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># </span><span style="color:#F97583;">TODO</span><span style="color:#6A737D;">: 实现完整的训练流程</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 1. 数据准备</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 2. 模型训练</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 3. 性能评估</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 4. 结果可视化</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generate_sequence_data</span><span style="color:#24292E;">(seq_type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;fibonacci&#39;</span><span style="color:#24292E;">, length</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    生成序列数据</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># </span><span style="color:#D73A49;">TODO</span><span style="color:#6A737D;">: 实现序列数据生成</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">train_rnn_on_sequence</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    训练RNN进行序列预测</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># </span><span style="color:#D73A49;">TODO</span><span style="color:#6A737D;">: 实现完整的训练流程</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 1. 数据准备</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 2. 模型训练</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 3. 性能评估</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 4. 结果可视化</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span></code></pre></div><blockquote><p>🏆 <strong>成就解锁</strong>：当你看到自己的RNN成功预测序列时，那种成就感是无与伦比的！这证明你已经掌握了AI领域的一项核心技术。</p></blockquote><hr><h2 id="📋-注意事项" tabindex="-1">📋 注意事项 <a class="header-anchor" href="#📋-注意事项" aria-label="Permalink to &quot;📋 注意事项&quot;">​</a></h2><h3 id="🤝-关于ai工具的使用" tabindex="-1">🤝 关于AI工具的使用 <a class="header-anchor" href="#🤝-关于ai工具的使用" aria-label="Permalink to &quot;🤝 关于AI工具的使用&quot;">​</a></h3><ul><li><strong>鼓励使用AI辅助学习</strong>：可以使用AI来帮助理解概念、调试代码</li><li><strong>重要提醒</strong>：必须保证在面试时对RNN具有完整的思路，能够独立应对相关问题</li><li><strong>学习目标</strong>：AI是你的学习伙伴，而不是替代品。真正的理解来自于你的思考和实践！</li></ul><hr><h2 id="提交要求" tabindex="-1">提交要求 <a class="header-anchor" href="#提交要求" aria-label="Permalink to &quot;提交要求&quot;">​</a></h2><h3 id="提交内容" tabindex="-1">提交内容 <a class="header-anchor" href="#提交内容" aria-label="Permalink to &quot;提交内容&quot;">​</a></h3><ul><li><p>代码文件</p><p>：将代码部分的.py文件作为邮件附件</p><ul><li>命名格式：<code>ml-6-姓名-学号.py</code></li></ul></li><li><p>文档报告</p><p>：将写有这道题目文本解答的.md文件作为邮件附件</p><ul><li>命名格式：<code>ml-6-姓名-学号.md</code></li></ul></li></ul><h3 id="提交方式" tabindex="-1">提交方式 <a class="header-anchor" href="#提交方式" aria-label="Permalink to &quot;提交方式&quot;">​</a></h3><ul><li><p><strong>邮箱</strong>: <code>gimmerml401@163.com</code></p></li><li><p><strong>主题</strong>: <code>6-姓名-学号</code></p></li></ul><blockquote><p>出题人：Pluto.</p><p>QQ：1183452142</p></blockquote>`,29),E=[r,c,i,y,u,m];function d(h,_,z,g,q,F){return p(),t("div",null,E)}const A=e(o,[["render",d]]);export{D as __pageData,A as default};
