import{_ as s}from"./chunks/CS.8a81f91e.js";import{_ as a,o as l,c as n,Q as p}from"./chunks/framework.e90f0c97.js";const g=JSON.parse(`{"title":"CS-EASY-02 基础数据结构","description":"","frontmatter":{"prev":{"text":"CS-EASY-01 What's your name","link":"./CS-EASY-01 What's your name"},"next":{"text":"CS-EASY-03 编译原理引入","link":"./CS-EASY-03 编译原理引入"}},"headers":[],"relativePath":"md/计算机系统/CS-EASY-02 基础数据结构.md","filePath":"md/计算机系统/CS-EASY-02 基础数据结构.md"}`),e={name:"md/计算机系统/CS-EASY-02 基础数据结构.md"},o=p('<p><img src="'+s+`" alt="标题"></p><h1 id="cs-easy-02-基础数据结构" tabindex="-1">CS-EASY-02 基础数据结构 <a class="header-anchor" href="#cs-easy-02-基础数据结构" aria-label="Permalink to &quot;CS-EASY-02 基础数据结构&quot;">​</a></h1><h2 id="step-1-指针与结构体" tabindex="-1">Step 1. 指针与结构体 <a class="header-anchor" href="#step-1-指针与结构体" aria-label="Permalink to &quot;Step 1. 指针与结构体&quot;">​</a></h2><h3 id="什么是指针" tabindex="-1">什么是指针？ <a class="header-anchor" href="#什么是指针" aria-label="Permalink to &quot;什么是指针？&quot;">​</a></h3><p><strong>指针</strong>是C语言提供的一种特殊变量类型，用于存储内存地址。C语言中为指针提供了<code>取地址（&amp;）</code>和<code>解引用（*）</code>运算符，以及算术运算支持（通常都涉及数组）。尝试了解它们的用法以及指针的相关知识，回答下列问题：</p><ol><li>如何在C语言中定义指针变量？指针变量的大小是固定的吗？其大小与什么有关？</li><li>写出以下代码的输出结果，并解释原因。</li></ol><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">int*</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">x;</span></span>
<span class="line"><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">q </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">++*</span><span style="color:#E1E4E8;">arr  </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">*++</span><span style="color:#E1E4E8;">q;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, x, y);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int*</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">x;</span></span>
<span class="line"><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">++*</span><span style="color:#24292E;">arr  </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">*++</span><span style="color:#24292E;">q;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, x, y);</span></span></code></pre></div><ol start="3"><li><p>什么是野指针？简述其危害。如何避免产生野指针？</p></li><li><p>尝试设计一个真正有效的<code>swap()</code>函数</p></li></ol><h3 id="什么是结构体" tabindex="-1">什么是结构体？ <a class="header-anchor" href="#什么是结构体" aria-label="Permalink to &quot;什么是结构体？&quot;">​</a></h3><p><strong>结构体</strong>是用户自定义的复合数据类型，可包含不同数据类型的成员。请自行了解结构体的相关内容，回答下列问题：</p><ol><li>请你完成一个<code>PerInfo</code>结构体的定义，成员组成如下。了解一下<code>typedef</code>关键字与结构体的一般用法，利用<code>typedef</code>为你刚刚定义的结构体取一个别名。提交最终的结构体定义。</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">1. 个人姓名（字符型数组，长度为10个字节）</span></span>
<span class="line"><span style="color:#e1e4e8;">2. 性别（字符型）</span></span>
<span class="line"><span style="color:#e1e4e8;">3. 年龄（整型）</span></span>
<span class="line"><span style="color:#e1e4e8;">4. 身高（双精度浮点型）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1. 个人姓名（字符型数组，长度为10个字节）</span></span>
<span class="line"><span style="color:#24292e;">2. 性别（字符型）</span></span>
<span class="line"><span style="color:#24292e;">3. 年龄（整型）</span></span>
<span class="line"><span style="color:#24292e;">4. 身高（双精度浮点型）</span></span></code></pre></div><ol start="2"><li><p>了解并说明<strong>结构体指针</strong>的含义。</p></li><li><p>了解一下结构体的<strong>内存对齐规则</strong>，据此计算一下你刚刚定义的结构体占用字节的大小（可用<code>sizeof</code>运算符验证计算结果）。提交计算过程。(此外，你还可以尝试更改一下结构体中成员的定义顺序，看看对结构体占用字节数的影响)</p></li></ol><h2 id="step-2-基础数据结构" tabindex="-1">Step 2. 基础数据结构 <a class="header-anchor" href="#step-2-基础数据结构" aria-label="Permalink to &quot;Step 2. 基础数据结构&quot;">​</a></h2><h3 id="什么是数据结构" tabindex="-1">什么是数据结构 <a class="header-anchor" href="#什么是数据结构" aria-label="Permalink to &quot;什么是数据结构&quot;">​</a></h3><p>在计算机科学中，数据结构是一种数据组织、管理和存储的格式。它是相互之间存在一种或多种特定关系的数据元素的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。数据结构往往同高效的检索算法和索引技术相关。</p><h3 id="常用数据结构类型" tabindex="-1">常用数据结构类型 <a class="header-anchor" href="#常用数据结构类型" aria-label="Permalink to &quot;常用数据结构类型&quot;">​</a></h3><p>经常使用的基础数据结构主要包括：</p><ul><li>线性表 <ul><li>顺序表（数组）</li><li>链表</li></ul></li><li>栈</li><li>队列</li><li>图 <ul><li>树</li></ul></li></ul><p>请完成对以上数据结构的学习，尝试回答下列问题：</p><ol><li>简述<strong>数组</strong>和<strong>链表</strong>的存取机制。</li><li>简述单向链表节点的结构特点。定义一个只存储一个整数的单向链表节点。</li><li>简述栈与队列的特点。了解栈基于数组的实现。</li><li>如何使用C语言保存一张图的信息？树呢？（在本题范围内，此内容简单了解即可）</li></ol><h2 id="step-3-综合应用" tabindex="-1">Step 3. 综合应用 <a class="header-anchor" href="#step-3-综合应用" aria-label="Permalink to &quot;Step 3. 综合应用&quot;">​</a></h2><p>没有人一直是大学生，但一直有人是大学生。小强就是一位刚刚考入格里姆（glimmer）大学的出色学子，为了提前应对大学学习，小强在学校论坛发表了一个帖子，希望可以有热心的学长学姐伸出援手。很快，就有“勤学部”的学长留言：“私我，有资料”。小强喜出望外，立刻私信了这位“热心”学长。学长语气亲切，自称是“勤学部”的骨干，手握大量内部复习资料、历年考题和教授讲义，打包价只要“一点点象征性的辛苦费”。为了学业，小强咬咬牙，按照学长的指示，通过一个隐蔽的链接支付了费用。钱刚转过去，学长发来了一个加密压缩包。小强满怀期待地解压，却发现里面空空如也！</p><p>他愤怒地截图质问，对方却已将他拉黑。小强的心沉到了谷底，刚入学就遭遇这种糟心事，学费还没交，生活费就先被骗走一笔！就在小强懊恼不已时，他的手机突然收到一条陌生短信：</p><blockquote><p>不要轻信网络陌生转账要求！</p></blockquote><p>原来，这个无良卖家的账号已经被大黑阔小明盗走了。在原路退回小强花的冤枉钱之后，小明决定出一道题考考小强。</p><blockquote><p>By the way：在各个Q群中打着“勤学部”旗号的绝大部分是骗子，望周知。</p></blockquote><h3 id="part-1-链起来再说" tabindex="-1">Part 1. 链起来再说 <a class="header-anchor" href="#part-1-链起来再说" aria-label="Permalink to &quot;Part 1. 链起来再说&quot;">​</a></h3><p>在Step 2中，你尝试定义了一个<code>只存储一个整数的单向链表节点</code>，接下来，我们将基于此实现一个<code>单向链表</code>及一些基本操作。要求如下：</p><blockquote><ol><li>使用你在上一步定义的单向链表节点作为链表节点。</li><li>链表初始状态为头指针<code>Head</code>指向一个data值为0的节点，此时该节点为链表唯一节点。</li><li>你需要实现该链表的如下操作：</li></ol></blockquote><p>H操作：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">H DATA1 DATA2 DATA3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">H DATA1 DATA2 DATA3</span></span></code></pre></div><p>该操作代表从链表的头部依次插入数据为DATA3、DATA2、DATA1的三个节点，并将头指针最终指向数据为DATA1的节点。</p><p>该操作进行后的示例为Head-&gt;DATA1-&gt;DATA2-&gt;DATA3-&gt;XXX...</p><p>T操作：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">T DATA1 DATA2 DATA3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">T DATA1 DATA2 DATA3</span></span></code></pre></div><p>该操作代表从链表的尾部依次插入数据为DATA1、DATA2、DATA3的三个节点。</p><p>该操作进行后的示例为Head-&gt;...XXX-&gt;DATA1-&gt;DATA2-&gt;DATA3-&gt;NULL</p><p>D操作：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">D LOCATION</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">D LOCATION</span></span></code></pre></div><p>该操作代表删去链表中从头指针指向节点开始第LOCATION位的节点。若删除节点为头节点，则头指针指向头节点的后继。</p><p>R操作：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">R</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">R</span></span></code></pre></div><p>该操作代表将链表反转。</p><blockquote><p>假设原链表为<code>Head → 1 → 2 → 3 → Ø</code>， 则反转后为<code>Head → 3 → 2 → 1 → Ø</code></p></blockquote><p>命令操作输入依次为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">H 2 1 1</span></span>
<span class="line"><span style="color:#e1e4e8;">T 1 0 2</span></span>
<span class="line"><span style="color:#e1e4e8;">D 3</span></span>
<span class="line"><span style="color:#e1e4e8;">......(完整内容参见招新群文件CS-EASY-02-1.txt)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">H 2 1 1</span></span>
<span class="line"><span style="color:#24292e;">T 1 0 2</span></span>
<span class="line"><span style="color:#24292e;">D 3</span></span>
<span class="line"><span style="color:#24292e;">......(完整内容参见招新群文件CS-EASY-02-1.txt)</span></span></code></pre></div><p>请将完成的代码文件保存，从头节点开始，遍历链表输出其节点的data值于<code>Numbers.txt</code>文件中。</p><h3 id="part-2-一栈到底" tabindex="-1">Part 2. 一栈到底 <a class="header-anchor" href="#part-2-一栈到底" aria-label="Permalink to &quot;Part 2. 一栈到底&quot;">​</a></h3><p>这一小节主要围绕栈进行操作，开始前，请自行学习掌握<strong>栈的具体实现</strong>。在上一小节操作得到的<code>Numbers.txt</code>文件中，你已经获得了一串由数字组成的字符串（下称为数字串），现在请结合文件<code>CS-EASY-02-2.txt</code>文件中的字符信息（下称为密文串），完成下列操作。</p><blockquote><p>栈的初始状态为空</p><p>每次执行压入操作，将按照密文串字符的排列顺序依次进行压入，每个字符仅会被压入一次。</p><p>每次执行弹出操作，从栈顶将一个字符弹出并输出该字符；如果弹出时栈为空，则输出<code>!</code>。</p><p>数字串的信息标示着栈的压入/弹出，具体而言</p><ul><li>数字0代表“读取栈顶字符并输出该字符（当前栈顶字符不弹出）”，数据保证此时栈不为空。</li><li>数字1代表“执行一次压入操作”</li><li>数字2代表“执行两次弹出操作”</li></ul></blockquote><p>请结合两串信息进行最终的解密。并将你的解密过程与最终的结果整理成文档提交至Github。</p><h2 id="本题提交方式" tabindex="-1"><strong>本题提交方式</strong> <a class="header-anchor" href="#本题提交方式" aria-label="Permalink to &quot;**本题提交方式**&quot;">​</a></h2><blockquote><p><a href="https://submit.glimmer.org.cn" target="_blank" rel="noreferrer"> 提交点这里 </a></p></blockquote><h2 id="出题人联系方式" tabindex="-1">出题人联系方式 <a class="header-anchor" href="#出题人联系方式" aria-label="Permalink to &quot;出题人联系方式&quot;">​</a></h2><blockquote><p>你好......再见 QQ：195225527</p></blockquote>`,56),t=[o];function c(r,i,d,y,E,h){return l(),n("div",null,t)}const b=a(e,[["render",c]]);export{g as __pageData,b as default};
