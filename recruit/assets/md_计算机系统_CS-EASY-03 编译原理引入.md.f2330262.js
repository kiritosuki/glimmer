import{_ as l}from"./chunks/CS.8a81f91e.js";import{_ as p,o,c as e,Q as a,k as s,a as n}from"./chunks/framework.e90f0c97.js";const t="/assets/EASY-03-01.e595d565.png",c="/assets/EASY-03-02.7688b3df.png",r="/assets/EASY-03-03.9d413987.png",E="/assets/EASY-03-04.fe08836c.png",y="/assets/EASY-03-05.fa7636d8.png",b=JSON.parse('{"title":"CS-EASY-03 编译原理引入","description":"","frontmatter":{"prev":{"text":"CS-EASY-02 基础数据结构","link":"./CS-EASY-02 基础数据结构"},"next":{"text":"CS-MEDIUM-01-位计算","link":"./CS-MEDIUM-01-位计算"}},"headers":[],"relativePath":"md/计算机系统/CS-EASY-03 编译原理引入.md","filePath":"md/计算机系统/CS-EASY-03 编译原理引入.md"}'),i={name:"md/计算机系统/CS-EASY-03 编译原理引入.md"},F=a('<p><img src="'+l+'" alt="标题"></p><h1 id="cs-easy-03-编译原理引入" tabindex="-1">CS-EASY-03 编译原理引入 <a class="header-anchor" href="#cs-easy-03-编译原理引入" aria-label="Permalink to &quot;CS-EASY-03 编译原理引入&quot;">​</a></h1><h2 id="part-1-基本概念" tabindex="-1">Part 1. 基本概念 <a class="header-anchor" href="#part-1-基本概念" aria-label="Permalink to &quot;Part 1. 基本概念&quot;">​</a></h2><h3 id="什么是编译" tabindex="-1">什么是编译 <a class="header-anchor" href="#什么是编译" aria-label="Permalink to &quot;什么是编译&quot;">​</a></h3><h4 id="计算机语言" tabindex="-1">计算机语言 <a class="header-anchor" href="#计算机语言" aria-label="Permalink to &quot;计算机语言&quot;">​</a></h4><p>计算机语言（Computer Language）指用于人与计算机之间通讯的语言。计算机语言是人与计算机之间传递信息的媒介。计算机系统最大特征是指令通过一种语言传达给机器。为了使电子计算机进行各种工作，就需要有一套用以编写计算机程序的数字、字符和语法规划，由这些字符和语法规则组成计算机各种指令（或各种语句）。这些就是计算机能接受的语言。具体而言，<strong>计算机语言可以大致分为“机器语言”、“汇编语言”、“高级语言”</strong>。<strong>而通过编译技术，就可以让容易编写的高级语言变成容易让机器理解的二进制程序</strong>。你可以通过自学了解计算机和计算机语言的发展史，对先人的理解可以帮助你树立一个更好的计算机视角。</p><p>通过上述内容，你对于编译应该有了一个初步的感觉，准确来说，<strong>编译（Compile）就是指：由一个程序（称为 “编译器”）将 “高级编程语言代码”（人写的）翻译成 “机器语言代码”（计算机能直接执行的）的过程。</strong></p><p>举个例子：</p><p>如果我让你直接回答这个问题：<strong>ᠢ ᠬᠦᠭᠦᠭ ᠢ ᠭᠡᠳᠦᠷ ᠮᠡᠨ</strong>。你肯定会束手无策，这很正常，因为我们中的绝大多数人应该都看不懂蒙古语😇；但是如果我先给你翻译成中文：<strong>“一加一等于几”</strong>。是不是一下子清晰起来了。当我们用高级语言编写程序时也是一个道理，<strong>计算机是无法直接理解我们用高级语言编写的程序的</strong>，<strong>这个时候就需要有一个“翻译”</strong>，<strong>将我们的高级语言翻译成汇编语言（后续还要继续转化为机器语言）或者机器语言，最终得到计算机可以直接理解的内容</strong>，从而准确地执行相关操作。<strong>其中，这个“翻译”的过程就叫做编译。而承担这个“翻译”任务的软件系统，我们就称之为编译器。</strong></p><p>接下来，请你尝试构建<strong>源程序</strong>、<strong>编译器</strong>和<strong>目标程序</strong>之间的<strong>关系图</strong>。另外请自行了解<strong>解释器</strong>，<strong>简述编译器和解释器的主要区别</strong>，<strong>并分别列举一个实际应用场景。</strong></p><h3 id="一个编译器的结构" tabindex="-1">一个编译器的结构 <a class="header-anchor" href="#一个编译器的结构" aria-label="Permalink to &quot;一个编译器的结构&quot;">​</a></h3><p>编译器通常分为前端和后端两部分。前端负责<strong>分析源程序并生成中间代码</strong>，后端则<strong>将中间代码转换为目标机器代码</strong>。</p><p>具体来说：</p><p>前端包括以下几个步骤：</p><ol><li><p><strong>词法分析</strong>： 将源程序的字符流分解为<strong>记号流（Tokens）</strong>。例如，<code>while(value!=100){ num++; }</code>中的while、(、value等都是记号。<strong>请你自行了解编译过程中的Token具体是什么，简述为什么需要将源代码转换为Token流</strong>。一般而言，根据程序设计语言的特点，单词可以分为五类：<strong>关键字</strong>、<strong>标识符</strong>、<strong>常量</strong>、<strong>运算符</strong>、<strong>界符</strong>。<strong>请你自行了解这五种分类的具体依据，尝试将<code>int a = 1;</code>和<code>while(value!=100){ num++; }</code>分别按这五类进行词法分析</strong></p></li><li><p><strong>语法分析</strong>： 根据编程语言的语法规则，将词法分析生成的记号流（Tokens） 组合成有意义的<strong>语法单位（如表达式、语句、函数等）</strong>，最终形成<strong>语法树（一种树状结构，直观展示代码的层级关系）</strong>。核心任务是<strong>验证 Token 流是否符合程序设计语言的语法规则</strong>，并<strong>用树形结构描述代码的语法层次</strong>。</p></li><li><p><strong>语义分析</strong>： 是编译器在语法分析之后进行的关键阶段，其核心任务是<strong>检查程序的语义合法性（即代码的 “意义” 是否合理）</strong>，并<strong>为语法树添加必要的语义信息（如类型、作用域等），为后续的中间代码生成奠定基础</strong>。</p></li></ol><p>针对语法分析和语义分析，两者均涉及对记号流（Token）的处理，但两者的核心逻辑不同：前者<strong>聚焦于语法结构的合法性</strong>，后者<strong>聚焦于语义逻辑的合理性</strong>。请<strong>简述它们在检查目标、依据和对象上的主要区别</strong>。</p><p>后端包括以下几个步骤：</p><ol><li>中间代码生成：生成与文法和目标机器无关的中间语言。</li><li>代码优化：改进中间代码，以产生执行速度较快的机器代码。</li><li>目标代码生成：生成最终的机器语言指令。</li></ol><blockquote><p>在本题范围内，后端部分内容简单了解即可。</p></blockquote><p>这里我们给出《编译原理》（龙书）中编译过程示意图，希望可以帮助你理解</p><img src="'+t+'"><h2 id="part-2-词法分析" tabindex="-1">Part 2. 词法分析 <a class="header-anchor" href="#part-2-词法分析" aria-label="Permalink to &quot;Part 2. 词法分析&quot;">​</a></h2><p>接下来，我们将重点了解词法分析过程中发挥关键作用的<strong>正则表达式</strong>和<strong>有限自动机</strong>。其中<strong>正则表达式是词法规则的描述工具，其核心作用是简洁、准确地定义各类词法单元的模式</strong>；<strong>有限自动机是词法匹配的执行工具，其核心作用是高效地识别输入字符流中符合正则表达式定义的词法单元</strong>。</p><h3 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h3><p><strong>正则表达式</strong>，又称<strong>规则表达式</strong>,（Regular Expression，在代码中常简写为regex、regexp或RE），它是一种文本模式，同时也是计算机科学的一个概念，其中包括普通字符（例如，a 到 z 之间的字母、阿拉伯数字等）和特殊字符（称为&quot;<strong>元字符</strong>&quot;）。正则表达式<strong>使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串</strong>，通常被用来检索、替换那些符合某个模式（规则）的文本。<strong>简单来说，正则表达式就是定义了一个“规则”，我们就可以利用这个正则表达式，从文本中匹配符合这个“规则”的字符串。</strong></p><p>下面我们举一个简单的例子，假设我们给出正则表达式<code>abc</code>，它就表达了一个“规则”——<strong>由字母a开始，接着是字母b，然后是c</strong>。任何包含这个连续序列的字符串，都会被该正则表达式匹配到。</p><p>上述例子中的正则表达式只有普通字符，但是在日常应用中，<strong>元字符才是正则表达式的核心组成部分</strong>。它们赋予了正则表达式 “描述模式” 的能力 —— 没有元字符，正则表达式只能进行简单的 “字面字符串匹配”；有了元字符，正则才能灵活表达复杂、多变的文本规则。下面我们给出一些基本的元字符及其含义。</p><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>匹配结果</th></tr></thead><tbody><tr><td><code>.</code></td><td>任意字符</td><td><code>a.c</code></td><td>&quot;abc&quot;, &quot;a@c&quot;</td></tr><tr><td><code>*</code></td><td>前面的字符出现0次或多次 (尽可能多)</td><td><code>ab*</code></td><td>&quot;a&quot;, &quot;ab&quot;, &quot;abb&quot;</td></tr><tr><td><code>+</code></td><td>前面的字符出现1次或多次 (尽可能多)</td><td><code>\\d+</code></td><td>&quot;3&quot;, &quot;123&quot;</td></tr><tr><td><code>?</code></td><td>前面的元素出现0次或1次 (尽可能多)</td><td><code>a?</code></td><td>&quot;&quot;(空), &quot;a&quot;</td></tr><tr><td><code>\\d</code></td><td>任意数字</td><td><code>\\d\\d</code></td><td>&quot;12&quot;, &quot;99&quot;</td></tr><tr><td><code>\\w</code></td><td>字母/数字/下划线</td><td><code>\\w+</code></td><td>&quot;hello&quot;, &quot;x1&quot;</td></tr><tr><td><code>[]</code></td><td>字符集合</td><td><code>[A-Za-z]</code></td><td>&quot;a&quot;, &quot;Z&quot;</td></tr><tr><td><code>^</code></td><td>字符串开头</td><td><code>^start</code></td><td>&quot;start...&quot;</td></tr><tr><td><code>$</code></td><td>字符串结尾</td><td><code>end$</code></td><td>&quot;...end&quot;</td></tr></tbody></table><p>结合这些元字符，我们就可以进行实现正则表达式的灵活表达。例如，我们可以尝试为<strong>正整数</strong>设计正则表达式：</p><ol><li><p>明确正整数的定义</p><ul><li>正整数是大于0的整数。</li><li>所有可能中只出现数字0-9，且至少出现一个数字</li><li>不能以0开头（如：012，001均不合法）</li></ul></li><li><p>由简到难地进行翻译</p><ol><li>先考虑“只出现数字0-9，且至少出现一个” 针对至少出现一个数字，显然可以采用<code>+</code>。所以我们可以写出初步的正则表达式<code>[0-9]+</code>。</li><li>再考虑“不能以0开头” 我们发现初步的正则表达式包含<code>0</code>,<code>012</code>，不符合题意，所以尝试进行更改。我们发现正整数除第一位不能含0外，其余位上无限制。所以我们可以单独表示第一位为<code>[1-9]</code>，后面的数字为0-9，出现0次或以上，可以表示为<code>[0-9]*</code>，综合起来，即为<code>[1-9][0-9]*</code>.</li><li>考虑边界情况 需要注意的是，我们这里为正整数设计的正则表达式，其目的为<strong>匹配的整个字符串就是正整数</strong>，需要特别注意排除字符串局部满足条件。（如：<code>abc123edf</code>中的<code>123</code>可以匹配，但这种匹配并不是我们想要的） 所以我们需要为正则表达式添加开头和结尾的边界限制，显然，我们需要使用<code>^</code>和<code>$</code>，即更改为<code>^[1-9][0-9]*$</code></li></ol><blockquote><p>尝试从词法分析的角度考虑这一要求的意义是什么（不用提交回答）</p></blockquote></li><li><p>进行验证 尽可能广泛的设置一些测试样例。这里我们可以设置如下样例： <code>1</code>, <code>0</code>, <code>11.1</code>, <code>-1</code>, <code>1a</code>.... <strong>观察其中的错误案例具体由我们正则表达式中的哪一部分排除</strong>。如果发现问题，就再添加错误点的情况下重新设计。</p></li></ol><p>最终我们就可以为正整数设计出一个最终的正则表达式:<code>^[1-9][0-9]*$</code>。</p><p>相信现在你对正则表达式已经有了初步的认识，请你依据上述给出的内容，并自行学习更多的具体运用，尝试为<strong>整数</strong>和<strong>C语言标识符（字母或下划线开头；后接字母、数字或下划线）设计正则表达式</strong>，<strong>提交附带思考步骤的作答</strong>。具体步骤可以参考上述过程，建议简化，<strong>体现你自己的思考即可</strong>。</p><blockquote><p>针对同一目标，正则表达式并不唯一，所以本题言之有理即可。<strong>重点在于能够体现你自己的思考</strong></p></blockquote><ul><li>正则表达式在线测试网站：<a href="https://regex101.com/" target="_blank" rel="noreferrer">Regex101</a> ， <a href="https://regex101.com" target="_blank" rel="noreferrer">https://regex101.com</a></li></ul><h3 id="有限自动机" tabindex="-1">有限自动机 <a class="header-anchor" href="#有限自动机" aria-label="Permalink to &quot;有限自动机&quot;">​</a></h3><p><strong>有限自动机</strong>是词法分析的核心工具，用于识别符合特定规则的字符串，是正则表达式的底层实现原理，用于将正则规则转换为可执行的匹配逻辑（即可以直接用程序实现，让计算机执行正则表达式）。它主要由以下部分组成：</p>',36),u=s("ul",null,[s("li",null,[s("strong",null,[n("状态集合("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"Q")]),s("annotation",{encoding:"application/x-tex"},"Q")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.68333em"}}),s("span",{class:"strut bottom",style:{height:"0.8777699999999999em","vertical-align":"-0.19444em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit"},"Q")])])]),n(")")]),n("：系统可能处于的位置（如 开始状态、接受状态）")]),s("li",null,[s("strong",null,"输入字母表(Σ)"),n("：允许的输入符号（如字母、数字）")]),s("li",null,[s("strong",null,"转移函数(δ)"),n("：根据当前状态和输入符号决定下一状态")]),s("li",null,[s("strong",null,[n("初始状态("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"q"),s("mn",null,"0")])]),s("annotation",{encoding:"application/x-tex"},"q_0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.43056em"}}),s("span",{class:"strut bottom",style:{height:"0.625em","vertical-align":"-0.19444em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord"},[s("span",{class:"mord mathit",style:{"margin-right":"0.03588em"}},"q"),s("span",{class:"vlist"},[s("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.03588em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle cramped"},[s("span",{class:"mord mathrm"},"0")])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),n("​")])])])])])]),n(")")]),n("：起始位置（机器开始运行时的初始状态，q_0∈Q）")]),s("li",null,[s("strong",null,[n("接受状态("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"F")]),s("annotation",{encoding:"application/x-tex"},"F")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.68333em"}}),s("span",{class:"strut bottom",style:{height:"0.68333em","vertical-align":"0em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.13889em"}},"F")])])]),n(")")]),n("：成功匹配时的终止位置（(F \\subseteq Q)，若机器读完输入后停在"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mi",null,"F")]),s("annotation",{encoding:"application/x-tex"},"F")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.68333em"}}),s("span",{class:"strut bottom",style:{height:"0.68333em","vertical-align":"0em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathit",style:{"margin-right":"0.13889em"}},"F")])])]),n("中的状态，则输入被 “接受”）。")])],-1),d=a('<p>我们同样举一个简单的例子来帮助你理解：</p><p>我们现在尝试给出一个<strong>偶数识别自动机（二进制表示）<strong>的有限自动机</strong>状态转移流程图</strong>，<strong>判断规则为识别以0结尾的二进制数</strong>。假设<strong>所有输入只包含0和1</strong></p><p><img src="'+c+'" alt="img"></p><p><strong>状态分析</strong>：</p><ul><li>S0：已读取的二进制数不是偶数（最后一位是1）</li><li>S1：已读取的二进制数是偶数（最后一位是0）</li></ul><p><strong>转移规则</strong>：</p><ul><li>无论当前在S0还是S1，只要读入1，则进入S0（因为最后一位是1，整个数变为奇数）</li><li>读入0，则进入S1（最后一位是0，整个数变为偶数）</li></ul><p><strong>接受条件</strong>：输入结束后停留在S1状态</p><p><strong>初始状态</strong>：通常我们设定初始状态为S0</p><p>如果你可以理解上述的简单流程图，那么让我们来看看稍微复杂一点的：</p><p>下面我们将尝试<strong>画出针对一般输入的，正整数对应正则表达式的，有限自动机工作流程图</strong></p><p>首先根据上述内容，我们可以知道这个正则表达式为<code>^[1-9][0-9]*$</code>，即我们的起始输入字符一定要是<code>[1-9]</code>，否则就进入error，可作图如下：</p><p><img src="'+r+'" alt="img"></p><p>接着针对后续输入，如果是<code>[0-9]</code>，则保持当前状态；否则就进入error，可作图如下：</p><p><img src="'+E+'" alt="img"></p><p>最后我们处理当整个输入字符串处理完毕（遇到EOF）时的情况，如果当前状态是接受状态（S1或S_accept），则接受该字符串（即识别为一个正整数）；否则拒绝。可作图如下：</p><p><img src="'+y+`" alt="img"></p><p>通过这两个例子，相信你对有限自动机也有了一定的了解，<strong>下面请你回答下列问题</strong>：</p><ol><li>请尝试<strong>画出识别以下正则表达式的有限自动机</strong>：</li></ol><ul><li><strong>整数</strong></li><li><strong>C语言标识符（字母或下划线开头，后接字母、数字或下划线）</strong></li></ul><ol start="2"><li>有限自动机一般可分为两类：<strong>确定型有限自动机（DFA）<strong>和</strong>非确定型有限自动机（NFA）</strong>。请你自行了解两者的相关知识，<strong>分别简述两者的特点</strong>，尝试<strong>区分一下你刚刚设计的两个有限自动机分别属于哪一类</strong>。依据结果<strong>尝试回答一下为什么实际编译器使用DFA而不是NFA</strong></li></ol><h3 id="词法分析器的c语言简单实现" tabindex="-1">词法分析器的C语言简单实现 <a class="header-anchor" href="#词法分析器的c语言简单实现" aria-label="Permalink to &quot;词法分析器的C语言简单实现&quot;">​</a></h3><p>了解了正则表达式与有限自动机，我们就可以尝试完成一个简单的词法分析器了。</p><p>下面我们尝试用C语言实现一个简单的词法分析器，识别以下Token类型：</p><ul><li>整数（只考虑非负整数）</li><li>加减乘除运算符与等号（+、-、*、/、=）</li><li>左右括号（(、)）</li><li>标识符（由字母或下划线开头，后接字母、数字或下划线）</li><li>C语言关键字，当前只考虑<code>int</code></li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 示例输入</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 预期输出</span></span>
<span class="line"><span style="color:#E1E4E8;">[KEYWORD, </span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">[ID, </span><span style="color:#9ECBFF;">&quot;sum&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">[ASSIGN, </span><span style="color:#9ECBFF;">&quot;=&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">[LPAREN, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">[ID, </span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">[PLUS, </span><span style="color:#9ECBFF;">&quot;+&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">[NUM, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">[RPAREN, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">[MUL, </span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">[ID, </span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">[SEMI, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 示例输入</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 预期输出</span></span>
<span class="line"><span style="color:#24292E;">[KEYWORD, </span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[ID, </span><span style="color:#032F62;">&quot;sum&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[ASSIGN, </span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[LPAREN, </span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[ID, </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[PLUS, </span><span style="color:#032F62;">&quot;+&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[NUM, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[RPAREN, </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[MUL, </span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[ID, </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[SEMI, </span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p><strong>请你补全下列代码，使之可以实现词法分析功能</strong></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;string.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;ctype.h&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// &lt;ctype.h&gt;提供如下函数：</span></span>
<span class="line"><span style="color:#6A737D;">// isdigit(c) -- 判断是否为十进制数字字符</span></span>
<span class="line"><span style="color:#6A737D;">// isalpha(c) -- 判断是否为字母（大写或小写）</span></span>
<span class="line"><span style="color:#6A737D;">// isspace(c) -- 判断是否为空白字符（空格、换行等）</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#6A737D;">// 具体详情请自行了解</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">INPUT_MAXSIZE</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">45</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Token类型定义</span></span>
<span class="line"><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    NUM,</span><span style="color:#6A737D;">     // 整数</span></span>
<span class="line"><span style="color:#E1E4E8;">    ID,</span><span style="color:#6A737D;">      // 标识符</span></span>
<span class="line"><span style="color:#E1E4E8;">    KEYWORD,</span><span style="color:#6A737D;"> // 关键字</span></span>
<span class="line"><span style="color:#E1E4E8;">    PLUS,</span><span style="color:#6A737D;">    // +</span></span>
<span class="line"><span style="color:#E1E4E8;">    MINUS,</span><span style="color:#6A737D;">   // -</span></span>
<span class="line"><span style="color:#E1E4E8;">    MUL,</span><span style="color:#6A737D;">     // *</span></span>
<span class="line"><span style="color:#E1E4E8;">    DIV,</span><span style="color:#6A737D;">     // /</span></span>
<span class="line"><span style="color:#E1E4E8;">    ASSIGN,</span><span style="color:#6A737D;">  // =</span></span>
<span class="line"><span style="color:#E1E4E8;">    LPAREN,</span><span style="color:#6A737D;">  // (</span></span>
<span class="line"><span style="color:#E1E4E8;">    RPAREN,</span><span style="color:#6A737D;">  // )</span></span>
<span class="line"><span style="color:#E1E4E8;">    SEMI,</span><span style="color:#6A737D;">    // ;</span></span>
<span class="line"><span style="color:#E1E4E8;">    EOF_TOKEN,</span><span style="color:#6A737D;"> // 结束标记</span></span>
<span class="line"><span style="color:#E1E4E8;">} TokenType;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Token结构</span></span>
<span class="line"><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Token{</span></span>
<span class="line"><span style="color:#E1E4E8;">    TokenType type;</span><span style="color:#6A737D;"> // Token类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">value;</span><span style="color:#6A737D;"> // Token的值（字符串形式）</span></span>
<span class="line"><span style="color:#E1E4E8;">} Token;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 全局变量</span></span>
<span class="line"><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> input;</span><span style="color:#6A737D;"> //存储输入字符串</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> pos;</span><span style="color:#6A737D;"> // 存储当前位置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 初始化词法分析器</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init_lexer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">input_str</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> input_str;</span></span>
<span class="line"><span style="color:#E1E4E8;">    pos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 跳过空白字符</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">skipwhitespace</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 请补全代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取关键字和标识符</span></span>
<span class="line"><span style="color:#E1E4E8;">Token </span><span style="color:#B392F0;">read_identifier</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 请补全代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取整数（即连续数字）</span></span>
<span class="line"><span style="color:#E1E4E8;">Token </span><span style="color:#B392F0;">read_number</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 请补全代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取Token</span></span>
<span class="line"><span style="color:#E1E4E8;">Token </span><span style="color:#B392F0;">get_next_token</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">skipwhitespace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">input</span><span style="color:#E1E4E8;">[pos] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\0</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        Token token;</span></span>
<span class="line"><span style="color:#E1E4E8;">        token.type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EOF_TOKEN;</span></span>
<span class="line"><span style="color:#E1E4E8;">        token.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> token;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">input</span><span style="color:#E1E4E8;">[pos];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 请补全代码</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果读取到无法识别的字符，输出错误信息并退出；</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 输出错误信息具体代码如下： </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// fprintf(stderr, &quot;Unexpected character: %c\\n&quot;, c);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// exit(1);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 打印token</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">print_token</span><span style="color:#E1E4E8;">(Token </span><span style="color:#FFAB70;">token</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (token.type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> NUM:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[NUM, </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">]</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, token.value);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ID:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[ID, </span><span style="color:#79B8FF;">\\&quot;%s\\&quot;</span><span style="color:#9ECBFF;">]</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, token.value);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> PLUS:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[PLUS, </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">+</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">]</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> MINUS:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[MINUS, </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">-</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">]</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> MUL:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[MUL, </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">*</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">]</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> DIV:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[DIV, </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">]</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ASSIGN:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[ASSIGN, </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">=</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">]</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> LPAREN:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[LPAREN, </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">(</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">]</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> RPAREN:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[RPAREN, </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">)</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">]</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SEMI:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[SEMI, </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">]</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> EOF_TOKEN:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 不打印结束标记</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 释放动态分配的内存</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (token.value </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">free</span><span style="color:#E1E4E8;">(token.value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">input</span><span style="color:#E1E4E8;">[INPUT_MAXSIZE];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">memset</span><span style="color:#E1E4E8;">(input, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(input));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;请输入要进行词法分析的字符串:</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">fgets</span><span style="color:#E1E4E8;">(input, INPUT_MAXSIZE, stdin);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">init_lexer</span><span style="color:#E1E4E8;">(input);</span><span style="color:#6A737D;"> // 初始化输入字符串</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 读取并输出字符串中对应的token</span></span>
<span class="line"><span style="color:#E1E4E8;">    Token token;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        token </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_next_token</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">print_token</span><span style="color:#E1E4E8;">(token);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(token.type </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> EOF_TOKEN);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;string.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;ctype.h&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// &lt;ctype.h&gt;提供如下函数：</span></span>
<span class="line"><span style="color:#6A737D;">// isdigit(c) -- 判断是否为十进制数字字符</span></span>
<span class="line"><span style="color:#6A737D;">// isalpha(c) -- 判断是否为字母（大写或小写）</span></span>
<span class="line"><span style="color:#6A737D;">// isspace(c) -- 判断是否为空白字符（空格、换行等）</span></span>
<span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#6A737D;">// 具体详情请自行了解</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">INPUT_MAXSIZE</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">45</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Token类型定义</span></span>
<span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    NUM,</span><span style="color:#6A737D;">     // 整数</span></span>
<span class="line"><span style="color:#24292E;">    ID,</span><span style="color:#6A737D;">      // 标识符</span></span>
<span class="line"><span style="color:#24292E;">    KEYWORD,</span><span style="color:#6A737D;"> // 关键字</span></span>
<span class="line"><span style="color:#24292E;">    PLUS,</span><span style="color:#6A737D;">    // +</span></span>
<span class="line"><span style="color:#24292E;">    MINUS,</span><span style="color:#6A737D;">   // -</span></span>
<span class="line"><span style="color:#24292E;">    MUL,</span><span style="color:#6A737D;">     // *</span></span>
<span class="line"><span style="color:#24292E;">    DIV,</span><span style="color:#6A737D;">     // /</span></span>
<span class="line"><span style="color:#24292E;">    ASSIGN,</span><span style="color:#6A737D;">  // =</span></span>
<span class="line"><span style="color:#24292E;">    LPAREN,</span><span style="color:#6A737D;">  // (</span></span>
<span class="line"><span style="color:#24292E;">    RPAREN,</span><span style="color:#6A737D;">  // )</span></span>
<span class="line"><span style="color:#24292E;">    SEMI,</span><span style="color:#6A737D;">    // ;</span></span>
<span class="line"><span style="color:#24292E;">    EOF_TOKEN,</span><span style="color:#6A737D;"> // 结束标记</span></span>
<span class="line"><span style="color:#24292E;">} TokenType;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Token结构</span></span>
<span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> Token{</span></span>
<span class="line"><span style="color:#24292E;">    TokenType type;</span><span style="color:#6A737D;"> // Token类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">value;</span><span style="color:#6A737D;"> // Token的值（字符串形式）</span></span>
<span class="line"><span style="color:#24292E;">} Token;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 全局变量</span></span>
<span class="line"><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> input;</span><span style="color:#6A737D;"> //存储输入字符串</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> pos;</span><span style="color:#6A737D;"> // 存储当前位置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 初始化词法分析器</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init_lexer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">input_str</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> input_str;</span></span>
<span class="line"><span style="color:#24292E;">    pos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 跳过空白字符</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">skipwhitespace</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 请补全代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取关键字和标识符</span></span>
<span class="line"><span style="color:#24292E;">Token </span><span style="color:#6F42C1;">read_identifier</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 请补全代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取整数（即连续数字）</span></span>
<span class="line"><span style="color:#24292E;">Token </span><span style="color:#6F42C1;">read_number</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 请补全代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取Token</span></span>
<span class="line"><span style="color:#24292E;">Token </span><span style="color:#6F42C1;">get_next_token</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">skipwhitespace</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#E36209;">input</span><span style="color:#24292E;">[pos] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\0</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        Token token;</span></span>
<span class="line"><span style="color:#24292E;">        token.type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EOF_TOKEN;</span></span>
<span class="line"><span style="color:#24292E;">        token.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> token;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">input</span><span style="color:#24292E;">[pos];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 请补全代码</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果读取到无法识别的字符，输出错误信息并退出；</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 输出错误信息具体代码如下： </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// fprintf(stderr, &quot;Unexpected character: %c\\n&quot;, c);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// exit(1);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 打印token</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print_token</span><span style="color:#24292E;">(Token </span><span style="color:#E36209;">token</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (token.type) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> NUM:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[NUM, </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, token.value);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ID:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[ID, </span><span style="color:#005CC5;">\\&quot;%s\\&quot;</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, token.value);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> PLUS:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[PLUS, </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">+</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> MINUS:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[MINUS, </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">-</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> MUL:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[MUL, </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">*</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> DIV:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[DIV, </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ASSIGN:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[ASSIGN, </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">=</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> LPAREN:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[LPAREN, </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> RPAREN:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[RPAREN, </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">)</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SEMI:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[SEMI, </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> EOF_TOKEN:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 不打印结束标记</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 释放动态分配的内存</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (token.value </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(token.value);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">input</span><span style="color:#24292E;">[INPUT_MAXSIZE];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">memset</span><span style="color:#24292E;">(input, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(input));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请输入要进行词法分析的字符串:</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">fgets</span><span style="color:#24292E;">(input, INPUT_MAXSIZE, stdin);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">init_lexer</span><span style="color:#24292E;">(input);</span><span style="color:#6A737D;"> // 初始化输入字符串</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取并输出字符串中对应的token</span></span>
<span class="line"><span style="color:#24292E;">    Token token;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">do</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_next_token</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">print_token</span><span style="color:#24292E;">(token);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(token.type </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> EOF_TOKEN);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>要求与提示</strong>：</p><ol><li>实现skip_whitespace函数：<strong>跳过空格、制表符、换行符等空白字符</strong>，<strong>可以处理输入字符串可能存在的多个连续空格符</strong></li><li>实现read_identifier函数：<strong>读取标识符（字母或下划线开头，后接字母、数字或下划线）<strong>和</strong>关键字（目前只要求能够识别<code>int</code>）</strong>，用一个 Token类型变量存储并返回该变量。</li><li>实现readnumber函数：<strong>读取非负整数（0-9组成的数字序列）</strong>，用一个Token类型变量存储并返回该变量。</li><li>完善getnexttoken函数：<strong>判断当前待处理部分是否是标识符、关键字或数字：如果不是，进行各种运算符、括号和分号的处理</strong></li></ol><p><strong>上传补全的函数以及程序运行截图</strong></p><h2 id="本题提交方式" tabindex="-1"><strong>本题提交方式</strong> <a class="header-anchor" href="#本题提交方式" aria-label="Permalink to &quot;**本题提交方式**&quot;">​</a></h2><blockquote><p><a href="https://submit.glimmer.org.cn" target="_blank" rel="noreferrer"> 提交点这里 </a></p></blockquote><h2 id="出题人联系方式" tabindex="-1">出题人联系方式 <a class="header-anchor" href="#出题人联系方式" aria-label="Permalink to &quot;出题人联系方式&quot;">​</a></h2><blockquote><p>你好......再见 QQ：195225527</p></blockquote>`,35),g=[F,u,d];function A(q,C,D,h,k,m){return o(),e("div",null,g)}const S=p(i,[["render",A]]);export{b as __pageData,S as default};
