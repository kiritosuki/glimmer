import{_ as e}from"./chunks/CS.8a81f91e.js";import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.e90f0c97.js";const y=JSON.parse('{"title":"CS-MEDIUM-01 位级操作","description":"","frontmatter":{"prev":{"text":"CS-EASY-03 编译原理引入","link":"./CS-EASY-03 编译原理引入"},"next":{"text":"CS-MEDIUM-02-浮点数","link":"./CS-MEDIUM-02-浮点数"}},"headers":[],"relativePath":"md/计算机系统/CS-MEDIUM-01-位计算.md","filePath":"md/计算机系统/CS-MEDIUM-01-位计算.md"}'),o={name:"md/计算机系统/CS-MEDIUM-01-位计算.md"},p=l('<p><img src="'+e+`" alt="标题"></p><h1 id="cs-medium-01-位级操作" tabindex="-1">CS-MEDIUM-01 位级操作 <a class="header-anchor" href="#cs-medium-01-位级操作" aria-label="Permalink to &quot;CS-MEDIUM-01 位级操作&quot;">​</a></h1><h2 id="课前准备-进制转换" tabindex="-1">课前准备--进制转换 <a class="header-anchor" href="#课前准备-进制转换" aria-label="Permalink to &quot;课前准备--进制转换&quot;">​</a></h2><p>因为位级操作是建立在二进制的基础上的，而二进制不是我们日常直观接触的，所以在接触学习以及应用位级操作之前，你需要掌握十进制与二进制的相互转化。</p><h3 id="要求" tabindex="-1"><strong>要求</strong> <a class="header-anchor" href="#要求" aria-label="Permalink to &quot;**要求**&quot;">​</a></h3><ol><li>将CS_M_01文件中所有十进制数改写为二进制数（<a href="../../CS_M_01.zip">下载点这里</a>）</li><li>你可能发现了：有一些小数在进行进制转换时会从原来的有限小数变成无限小数。我们称此为进制的表示不完全性。思考什么时候不同进制之间能完全转化，什么时候可能会出现一个进制没法完全表示另一个进制的数。</li></ol><p><strong>提交方式</strong>：在markdown文档中提交正确的<strong>代码</strong>和<strong>你的思考答案</strong>，并用截图展示进制转换的<strong>运行结果</strong></p><h2 id="step-1-了解位运算" tabindex="-1">Step 1.了解位运算 <a class="header-anchor" href="#step-1-了解位运算" aria-label="Permalink to &quot;Step 1.了解位运算&quot;">​</a></h2><p>位运算是对整数（通常是二进制表示）进行的运算，操作对象是单个比特位。位运算直接作用于数值的二进制位，按位进行处理。 位运算相比常规加减乘除效率更高，能在算法实现、性能优化、状态压缩中起到重要作用 常见的位运算：</p><ul><li><p>按位与（AND）：<code>&amp;</code></p><p>对应位置上的两个比特都为 1 时结果为 1，否则为 0。</p><ul><li>例：<code>1010 &amp; 1100 = 1000</code></li></ul></li><li><p>按位或（OR）：<code>|</code></p><p>对应位置上的两个比特有一个为 1 时结果为 1，否则为 0。</p><ul><li>例：<code>1010 | 1100 = 1110</code></li></ul></li><li><p>按位异或（XOR）：<code>^</code></p><p>对应位置上的两个比特不同则结果为 1，相同则为 0。</p><ul><li>例：<code>1010 ^ 1100 = 0110</code></li></ul></li><li><p>按位非（NOT）：<code>~</code></p><p>对单个比特进行取反，0 变为 1，1 变为 0。</p><ul><li>例：<code>~1010 = 0101</code></li></ul></li><li><p>左移（Left Shift）：<code>&lt;&lt;</code></p><p>将二进制数的所有位向左移动指定的位数，左移相当于乘以2的幂。</p><ul><li>例：<code>1010 &lt;&lt; 1 = 10100</code> （十进制是 <code>10 &lt;&lt; 1 = 20</code>）</li></ul></li><li><p>右移（Right Shift）：<code>&gt;&gt;</code></p><p>算数右移：对有符号数进行的操作，将二进制数的所有位向右移动指定的位数，同时符号位会被拓展。</p><p>逻辑右移：对无符号数进行的操作，将二进制数的所有位向右移动指定的位数，相当于除以2的幂。</p><ul><li><p>假设 <code>x = -4</code>，二进制表示为 <code>11111111111111111111111111111100</code>（32位表示），算术右移1位后：</p><p><code>x &gt;&gt; 1</code>结果是 <code>11111111111111111111111111111110</code>，即 <code>-2</code>，符号位保持为 <code>1</code>。</p></li></ul></li></ul><p>任务</p><ol><li><p>在接触了C语言这么长时间后，相信你已经对逻辑运算了如指掌了，那么你能说说看逻辑运算和位运算的区别和联系吗。思考并提交于<strong>markdown文档</strong>。</p></li><li><p>位运算的定义很简单，但是再简单的定义也可能产生一些有用的性质（比如运算律）。查阅资料了解位运算有哪些性质。</p></li><li><p>移位运算中，右移有两种，其中算数右移对应有符号数，逻辑右移对应无符号数，那么为什么会有这种区别呢。查阅资料理解整数的补码表示后回答于<strong>markdown文档</strong>。</p><blockquote><p>可以阅读《深入理解计算机系统》第二章</p></blockquote></li></ol><h2 id="step-2-位运算基本应用" tabindex="-1">Step 2.位运算基本应用 <a class="header-anchor" href="#step-2-位运算基本应用" aria-label="Permalink to &quot;Step 2.位运算基本应用&quot;">​</a></h2><p>了解了什么是位运算后，接下来你需要去了解一些位运算的基础运用，例如如何提取出一个整数二进制表示中最右侧的1，在你充分了解了这些基础运用后，完成以下这些小练习进一步巩固自己对位运算的理解并加强对位运算的运用能力。</p><ol><li><p>给定一个整数<code>x</code>（十进制），同时指定一个<strong>位数</strong><code>n</code>，确定这个整数<code>x</code>的二进制表示上第<code>n</code>位是0还是1。例如：251的二进制表示是<code>11111011</code>，n=3，结果返回0。</p></li><li><p>给定一个整数<code>x</code>（十进制），指定一个<strong>位数</strong><code>n</code>，给定一个修正值<code>t</code>（0或者1），将整数<code>x</code>的二进制表示上的第<code>n</code>位改为修正值<code>t</code>。输出被修改后的整数。</p></li><li><p>给定一个有符号32位整数<code>x</code>，找到其二进制表示上从右开始的第一个1，并输出该数，例如：<code>x=10</code>,二进制表示为<code>1010</code>,第一个1在第二位，所以输出二进制表示为<code>10</code>的数<code>2</code>。</p><blockquote><p>提示：阅读《深入理解计算机系统》第二章，补码表示下的有符号整数有什么性质？</p></blockquote></li><li><p>给定一个数<code>n</code>，接下来输入n个数，其中这n个数中有一个数只出现了一次，其余数都出现了两次。请你在O(n)时间内找到这个数并输出。</p></li><li><p>现在有两串无符号数<code>a</code>和<code>b</code>的二进制编码，并且有<code>a&lt;b</code>，每个数字的大小在100位以内，现在问区间[a,b]内<code>&amp;</code>的结果。</p></li><li><p>n皇后问题：对于一个n*n的格子组，现在要求放置n个皇后，要求每个皇后制的位置所处的左右对角线以及同行同列上没有其他皇后。问最后有多少种可能。n是一个小于10的正整数。</p><blockquote><p><strong>这道题的常规算法效率较低，但是使用位运算的方法可以使效率大大提升，这也使得这道题成了位运算运用的经典题型</strong></p></blockquote></li></ol><p><strong>任务</strong>：</p><ul><li>使用位运算完成上述题，并将正确的可执行代码提交至<strong>markdown文档</strong>中，同时附上截图展示<strong>运行结果</strong>。</li></ul><p><strong>提交方式</strong>：在markdown文档中提交正确的可执行的<strong>代码</strong>和截图展示<strong>运行成果</strong></p><h2 id="step-3" tabindex="-1">Step 3 <a class="header-anchor" href="#step-3" aria-label="Permalink to &quot;Step 3&quot;">​</a></h2><p>在格里姆的活动室，大家非常喜欢玩数独游戏。每周末，爱好者会提前设计好一些数独题目，大家聚在一起比赛解题，看谁能最快填满数独格子。 不过，有时难度较高的题目让大家头疼不已，于是希望能开发一个自动数独求解器：只需输入当前数独盘面，系统就能自动算出一种合理的填法，帮助大家学习数独技巧，或验证自己的答案是否正确。 你作为活动区的数独爱好者，准备开发这样一个数独求解器，让大家在活动中能随时验证和学习数独解题方法。你的任务是：</p><blockquote><p>✅ <strong>重点说明实现一个程序，能自动填写并输出一个可行的数独解，如果无解则提示“无解”。</strong></p></blockquote><p><strong>输入：</strong></p><ul><li>数独的初始状态，共九行，每行一串字符串(有空格)，其中数字代表在该行该位置上已经放置了的数字，<code>.</code>代表没有放置任何量。</li></ul><p><strong>输出：</strong></p><ul><li>要求你输出最后的标准答案，依然采用字符串输出，共九行九列。</li><li>要求使用位运算的方法。</li></ul><p><strong>输入样例：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">5 . . . . 7 . . .</span></span>
<span class="line"><span style="color:#e1e4e8;">. 2 . . 6 . . 8 .</span></span>
<span class="line"><span style="color:#e1e4e8;">. . 3 9 . . 2 . .</span></span>
<span class="line"><span style="color:#e1e4e8;">. 7 . 6 . . . 4 2</span></span>
<span class="line"><span style="color:#e1e4e8;">. . 9 . 4 . 1 . .</span></span>
<span class="line"><span style="color:#e1e4e8;">1 . . . . 9 . . 3</span></span>
<span class="line"><span style="color:#e1e4e8;">. . 1 . . 2 6 . .</span></span>
<span class="line"><span style="color:#e1e4e8;">. 6 . . 7 . . 5 .</span></span>
<span class="line"><span style="color:#e1e4e8;">. . . 4 . . . . 7</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">5 . . . . 7 . . .</span></span>
<span class="line"><span style="color:#24292e;">. 2 . . 6 . . 8 .</span></span>
<span class="line"><span style="color:#24292e;">. . 3 9 . . 2 . .</span></span>
<span class="line"><span style="color:#24292e;">. 7 . 6 . . . 4 2</span></span>
<span class="line"><span style="color:#24292e;">. . 9 . 4 . 1 . .</span></span>
<span class="line"><span style="color:#24292e;">1 . . . . 9 . . 3</span></span>
<span class="line"><span style="color:#24292e;">. . 1 . . 2 6 . .</span></span>
<span class="line"><span style="color:#24292e;">. 6 . . 7 . . 5 .</span></span>
<span class="line"><span style="color:#24292e;">. . . 4 . . . . 7</span></span></code></pre></div><p><strong>输出样例</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">5 8 6 2 3 7 4 1 9</span></span>
<span class="line"><span style="color:#e1e4e8;">9 2 4 5 6 1 3 8 7</span></span>
<span class="line"><span style="color:#e1e4e8;">7 1 3 9 8 4 2 6 5</span></span>
<span class="line"><span style="color:#e1e4e8;">3 7 5 6 1 8 9 4 2</span></span>
<span class="line"><span style="color:#e1e4e8;">6 4 9 7 5 2 1 3 8</span></span>
<span class="line"><span style="color:#e1e4e8;">1 5 8 8 2 9 7 7 3</span></span>
<span class="line"><span style="color:#e1e4e8;">8 3 1 7 5 2 6 9 4</span></span>
<span class="line"><span style="color:#e1e4e8;">4 6 7 3 7 6 8 5 1</span></span>
<span class="line"><span style="color:#e1e4e8;">2 9 2 4 9 3 5 8 7</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">5 8 6 2 3 7 4 1 9</span></span>
<span class="line"><span style="color:#24292e;">9 2 4 5 6 1 3 8 7</span></span>
<span class="line"><span style="color:#24292e;">7 1 3 9 8 4 2 6 5</span></span>
<span class="line"><span style="color:#24292e;">3 7 5 6 1 8 9 4 2</span></span>
<span class="line"><span style="color:#24292e;">6 4 9 7 5 2 1 3 8</span></span>
<span class="line"><span style="color:#24292e;">1 5 8 8 2 9 7 7 3</span></span>
<span class="line"><span style="color:#24292e;">8 3 1 7 5 2 6 9 4</span></span>
<span class="line"><span style="color:#24292e;">4 6 7 3 7 6 8 5 1</span></span>
<span class="line"><span style="color:#24292e;">2 9 2 4 9 3 5 8 7</span></span></code></pre></div><ul><li>提示：这题与n皇后问题的限制方式有什么区别，可以怎么实现呢。</li></ul><h2 id="本题提交方式" tabindex="-1"><strong>本题提交方式</strong> <a class="header-anchor" href="#本题提交方式" aria-label="Permalink to &quot;**本题提交方式**&quot;">​</a></h2><blockquote><p><a href="https://submit.glimmer.org.cn" target="_blank" rel="noreferrer"> 提交点这里 </a></p></blockquote><h2 id="出题人联系方式" tabindex="-1">出题人联系方式 <a class="header-anchor" href="#出题人联系方式" aria-label="Permalink to &quot;出题人联系方式&quot;">​</a></h2><blockquote><p>QQ：2979734778</p><p>邮箱：<a href="mailto:2979734778@qq.com" target="_blank" rel="noreferrer">2979734778@qq.com</a></p></blockquote>`,34),c=[p];function t(r,i,d,g,u,h){return n(),a("div",null,c)}const _=s(o,[["render",t]]);export{y as __pageData,_ as default};
