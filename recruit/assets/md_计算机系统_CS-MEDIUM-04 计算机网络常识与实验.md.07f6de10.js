import{_ as a}from"./chunks/CS.8a81f91e.js";import{_ as t,o,c as r,Q as e}from"./chunks/framework.e90f0c97.js";const m=JSON.parse('{"title":"CS-MEDIUM-04 计算机网络常识与实验","description":"","frontmatter":{"prev":{"text":"CS-MEDIUM-03 Read From Memory","link":"./CS-MEDIUM-03 Read From Memory"},"next":{"text":"CS-HARD-01-cache","link":"./CS-HARD-01-cache"}},"headers":[],"relativePath":"md/计算机系统/CS-MEDIUM-04 计算机网络常识与实验.md","filePath":"md/计算机系统/CS-MEDIUM-04 计算机网络常识与实验.md"}'),l={name:"md/计算机系统/CS-MEDIUM-04 计算机网络常识与实验.md"},i=e('<p><img src="'+a+'" alt="标题"></p><h1 id="cs-medium-04-计算机网络常识与实验" tabindex="-1">CS-MEDIUM-04 计算机网络常识与实验 <a class="header-anchor" href="#cs-medium-04-计算机网络常识与实验" aria-label="Permalink to &quot;CS-MEDIUM-04 计算机网络常识与实验&quot;">​</a></h1><h2 id="step-1" tabindex="-1">Step 1 <a class="header-anchor" href="#step-1" aria-label="Permalink to &quot;Step 1&quot;">​</a></h2><h3 id="part-1-特殊-ip-地址与网段" tabindex="-1">Part 1：特殊 IP 地址与网段 <a class="header-anchor" href="#part-1-特殊-ip-地址与网段" aria-label="Permalink to &quot;Part 1：特殊 IP 地址与网段&quot;">​</a></h3><ol><li><strong>127.0.0.1 的作用</strong> 解释 <code>127.0.0.1</code> 的含义及用途，并说明它与 <code>localhost</code> 的关系。</li><li><strong>常见特殊网段</strong> 除了 <code>127.0.0.1</code>，还有哪些保留地址和特殊网段？请至少举出 3 类并说明用途，例如： <ol><li>私有地址（Private IP）</li><li>回环地址（Loopback）</li><li>链路本地地址（Link-local）</li><li>多播地址（Multicast）</li><li>广播地址（Broadcast）</li></ol></li></ol><h3 id="part-2-计算机网络分层模型" tabindex="-1">Part 2：计算机网络分层模型 <a class="header-anchor" href="#part-2-计算机网络分层模型" aria-label="Permalink to &quot;Part 2：计算机网络分层模型&quot;">​</a></h3><ol><li><strong>各层协议与作用</strong> 简述 <strong>OSI 七层模型</strong> 与 <strong>TCP/IP 四层模型</strong>，并说明每一层的主要功能和常见协议。</li></ol><blockquote><p><strong>提示：</strong> 例如 HTTP 属于应用层，TCP 属于传输层。</p></blockquote><ol><li><strong>常用协议举例</strong> 列出至少 5 个常用网络协议，并标注它们所在的层次及典型用途。</li></ol><h3 id="part-3-dns-的工作流程" tabindex="-1">Part 3：DNS 的工作流程 <a class="header-anchor" href="#part-3-dns-的工作流程" aria-label="Permalink to &quot;Part 3：DNS 的工作流程&quot;">​</a></h3><ol><li><strong>DNS 的作用</strong> 简述 DNS 在网络通信中的作用。</li><li><strong>DNS 查询流程</strong> 描述从浏览器输入 <code>www.example.com</code> 到最终获取 IP 地址的 DNS 解析过程，包含以下内容： <ol><li>浏览器缓存、本地缓存、hosts 文件</li><li>递归查询与迭代查询的区别</li><li>根域名服务器、顶级域名服务器、权威 DNS 服务器的作用</li></ol></li><li><strong>实际操作</strong> 使用 <code>nslookup</code> 或 <code>dig</code> 命令，查询任意一个域名的解析过程，并截图结果。</li></ol><h3 id="part-4-arp-协议基础" tabindex="-1">Part 4：ARP 协议基础 <a class="header-anchor" href="#part-4-arp-协议基础" aria-label="Permalink to &quot;Part 4：ARP 协议基础&quot;">​</a></h3><ol><li><strong>ARP 的作用</strong> 简述 ARP（地址解析协议）的工作原理，以及它在局域网通信中的地位。</li><li><strong>ARP 报文结构</strong> 了解 ARP 请求与 ARP 响应的报文格式（硬件类型、协议类型、MAC 地址、IP 地址等字段）。</li><li><strong>ARP 与安全</strong> 简述 ARP 协议存在的安全隐患，以及常见的防护手段（例如静态 ARP 表、ARP 防护软件等）。</li><li><strong>动手实验（可选加分）</strong> 使用抓包工具（如 Wireshark）捕获一次正常的 ARP 请求与响应报文，并分析字段含义。</li></ol><h2 id="tips" tabindex="-1">Tips <a class="header-anchor" href="#tips" aria-label="Permalink to &quot;Tips&quot;">​</a></h2><ol><li>常识和基础部分可参考群中资料《计算机网络：自顶向下方法》，书中关于通信网的一些题目涵盖外的知识点也推荐了解一下。</li><li>后面部分需要同学们发挥主观能动性，自行了解相关概念；回答注意体现自己理解即可，完成度可以放在第二位，可以参考<a href="https://www.runoob.com/w3cnote/summary-of-network.html%E4%BB%A5%E5%8F%8Ahttps://csdiy.wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/topdown_ustc/" target="_blank" rel="noreferrer">https://www.runoob.com/w3cnote/summary-of-network.html以及https://csdiy.wiki/计算机网络/topdown_ustc/</a></li><li>本题不需要提交</li></ol><h2 id="step-2" tabindex="-1">Step 2 <a class="header-anchor" href="#step-2" aria-label="Permalink to &quot;Step 2&quot;">​</a></h2><h3 id="part-1-ip-地址转换" tabindex="-1">Part 1:IP 地址转换 <a class="header-anchor" href="#part-1-ip-地址转换" aria-label="Permalink to &quot;Part 1:IP 地址转换&quot;">​</a></h3><p><strong>题目：</strong> 编写一个程序，输入一个 IPv4 地址（形如 <code>&quot;192.168.1.1&quot;</code>），输出它对应的 32 位无符号整数形式。 再将该整数转换回 IPv4 字符串，验证是否一致。</p><p><strong>示例：</strong></p><p>makefileCopyEdit输入: 192.168.1.1</p><p>输出: 3232235777</p><p>再转换回: 192.168.1.1</p><h3 id="part-2-模拟-ping" tabindex="-1">Part 2:模拟 Ping <a class="header-anchor" href="#part-2-模拟-ping" aria-label="Permalink to &quot;Part 2:模拟 Ping&quot;">​</a></h3><p><strong>题目：</strong> 编写一个简单的 <strong>TCP</strong> 或 <strong>UDP</strong> 客户端，连接到 <code>example.com</code> 的 <code>80</code> 端口，成功建立连接后输出“连接成功”，否则输出“连接失败”。 （不要求真正发送 ICMP Ping 报文，用 socket 即可）</p><p><strong>提示：</strong> 可以使用 <code>socket</code> 库，注意异常处理。</p><h3 id="part-3-http-请求解析" tabindex="-1">Part 3:HTTP 请求解析 <a class="header-anchor" href="#part-3-http-请求解析" aria-label="Permalink to &quot;Part 3:HTTP 请求解析&quot;">​</a></h3><p><strong>题目：</strong> 编写一个程序，向 <code>http://example.com</code> 发送 HTTP 请求（GET），接收服务器返回的数据，并打印 HTTP 响应头（Header）部分。</p><p><strong>加分：</strong> 在代码中手动构造 HTTP 请求报文（字符串拼接），而不是直接用高级网络库。</p><h2 id="step-3" tabindex="-1">Step 3 <a class="header-anchor" href="#step-3" aria-label="Permalink to &quot;Step 3&quot;">​</a></h2><h3 id="part-1-简易聊天室-tcp" tabindex="-1">Part 1:简易聊天室（TCP） <a class="header-anchor" href="#part-1-简易聊天室-tcp" aria-label="Permalink to &quot;Part 1:简易聊天室（TCP）&quot;">​</a></h3><p><strong>题目：</strong> 使用 TCP Socket 编程，实现一个简单的 <strong>多人聊天室</strong>：</p><ul><li>服务器端：接收多个客户端连接，将收到的消息广播给所有已连接客户端。</li><li>客户端：连接到服务器，能发送和接收消息。</li></ul><p><strong>加分：</strong> 实现“昵称”功能，在每条消息前加上发送者昵称。</p><h3 id="part-2-数据包解析器" tabindex="-1">Part 2:数据包解析器 <a class="header-anchor" href="#part-2-数据包解析器" aria-label="Permalink to &quot;Part 2:数据包解析器&quot;">​</a></h3><p><strong>题目：</strong> 编写一个程序，读取给定的一个 <strong>PCAP 文件</strong>（抓包文件），统计其中出现最多的源 IP 地址，并输出它的出现次数。</p><p><strong>提示：</strong></p><ul><li>PCAP 文件可以用 Wireshark 抓几个包生成。</li><li>Python 可用 <code>scapy</code> 解析，C 可用 <code>libpcap</code>。</li></ul><h3 id="part-3-自定义-迷你协议" tabindex="-1">Part 3:自定义“迷你协议” <a class="header-anchor" href="#part-3-自定义-迷你协议" aria-label="Permalink to &quot;Part 3:自定义“迷你协议”&quot;">​</a></h3><p><strong>题目：</strong> 自己设计一个简单的应用层协议：</p><ul><li>报文格式：<code>[LEN][TYPE][DATA]</code><ul><li><code>LEN</code>：数据部分长度（1字节）</li><li><code>TYPE</code>：消息类型（1字节，1=文本，2=数字）</li><li><code>DATA</code>：实际数据</li></ul></li><li>编写客户端与服务器： <ul><li>客户端可发送两种类型的消息</li><li>服务器收到消息后解析，并按类型输出</li></ul></li></ul><p><strong>加分：</strong></p><ul><li>支持多客户端</li><li>支持粘包/拆包处理</li></ul><h3 id="part-4-模拟-arp-表" tabindex="-1">Part 4:模拟 ARP 表 <a class="header-anchor" href="#part-4-模拟-arp-表" aria-label="Permalink to &quot;Part 4:模拟 ARP 表&quot;">​</a></h3><p><strong>题目：</strong> 编写一个程序，模拟一个 ARP 表（IP ↔ MAC 映射关系）：</p><ul><li>支持添加、删除、查询条目</li><li>查询不到时输出“未找到”</li><li>使用结构体（C/C++）或字典（Python）实现</li></ul><h2 id="step-4" tabindex="-1">Step 4 <a class="header-anchor" href="#step-4" aria-label="Permalink to &quot;Step 4&quot;">​</a></h2><h3 id="part-1-arp" tabindex="-1">Part 1：ARP <a class="header-anchor" href="#part-1-arp" aria-label="Permalink to &quot;Part 1：ARP&quot;">​</a></h3><p><strong>什么是 ARP 欺骗？</strong> 简述 ARP 协议的工作原理，并解释何为 ARP 欺骗攻击。</p><p><strong>ARP 协议的漏洞分析</strong> ARP 协议的哪一项设计特点，使得局域网内可以被实施 ARP 欺骗？请结合原理说明。</p><p><strong>编程实战：ARP 欺骗</strong> 使用 <strong>C 语言</strong> 编写一个简单的 ARP 欺骗程序，使得与您处于同一 Wi-Fi 网络的目标设备（例如室友的电脑，或您自己的另一台设备）失去网络连接。</p><blockquote><p><strong>提示：</strong> 建议先熟悉以太网帧结构与 ARP 报文格式。实验时请注意合法合规，仅在允许的设备上测试。</p></blockquote><h3 id="part-2-ipv6" tabindex="-1">Part 2：IPv6 <a class="header-anchor" href="#part-2-ipv6" aria-label="Permalink to &quot;Part 2：IPv6&quot;">​</a></h3><p><strong>为什么需要 IPv6？</strong> 简述 IPv6 出现的背景，以及相比 IPv4 的主要改进之处。</p><p><strong>获取运营商分配的 IPv6 地址</strong> 尝试在自己的设备上查看并获取运营商提供的 IPv6 地址，并截图记录。</p><p><strong>实验：Nginx IPv6 配置</strong> 配置 Nginx 使其可以通过 IPv6 对外提供服务，并在外网进行访问测试。（简单输出一个helloworld即可）</p><blockquote><p><strong>加分项：</strong> 如果使用校园网环境，可尝试直接通过 IPv6 对外访问。</p></blockquote><h3 id="part-3-dns" tabindex="-1">Part 3：DNS <a class="header-anchor" href="#part-3-dns" aria-label="Permalink to &quot;Part 3：DNS&quot;">​</a></h3><p><strong>什么是 DNS 污染？</strong> 调查并简述 DNS 污染的原理、表现形式以及危害。</p><p><strong>修改本地 DNS 服务器地址</strong> 将本机的 DNS 服务器地址修改为指定值（例如公共 DNS：8.8.8.8），并测试访问效果。</p><p><strong>修改 hosts 文件</strong> 编辑本机的 <code>hosts</code> 文件，将 GitHub 相关域名直接映射到对应 IP 地址，然后测试访问是否有所改善。</p><blockquote><p><strong>提示：</strong> 注意修改前备份原文件，防止因配置错误导致无法访问网站。</p></blockquote><h3 id="step-4-组网实验" tabindex="-1">Step 4：组网实验 <a class="header-anchor" href="#step-4-组网实验" aria-label="Permalink to &quot;Step 4：组网实验&quot;">​</a></h3><p>希望你可以使用任意的网络模拟器(推荐使用PacketTracer,当然了要是你能用HCL做我向你致以崇高的敬意)最终完成下示网络拓扑结构的搭建：</p><p><img src="https://raw.githubusercontent.com/ZHOUGONG24/pic/master/image-20250813193138281.png" alt="image-20250813193138281"></p><p>咱们可以分步骤来进行:</p><h4 id="part-4-1-1" tabindex="-1">Part 4.1.1 <a class="header-anchor" href="#part-4-1-1" aria-label="Permalink to &quot;Part 4.1.1&quot;">​</a></h4><p>完成 <code>10.0.10.0/24</code>与10.0.20.0/24网段的搭建,使PC0至PC3可以互通</p><h4 id="part-4-1-2" tabindex="-1">Part 4.1.2 <a class="header-anchor" href="#part-4-1-2" aria-label="Permalink to &quot;Part 4.1.2&quot;">​</a></h4><p>完成<code>10.0.30.0/24</code>网段的搭建，并为<code>Edge_Route</code>与<code>Side_Route</code>配置动态路由协议，在不使用静态路由的前提下,使PC0至PC4可以互通</p><h4 id="part-4-1-3" tabindex="-1">Part 4.1.3 <a class="header-anchor" href="#part-4-1-3" aria-label="Permalink to &quot;Part 4.1.3&quot;">​</a></h4><p>配置ICP,并为其配置静态路由,使PC0至PC4可以连通<strong>ICP</strong></p><h4 id="part-4-1-4" tabindex="-1">Part 4.1.4 <a class="header-anchor" href="#part-4-1-4" aria-label="Permalink to &quot;Part 4.1.4&quot;">​</a></h4><p>假设ICP所在的网段为外网,PC0至PC3所在的网段为内网,为<code>Edge_Route</code>配置NAT,你可以使用 Ping 测试连通性。</p><h3 id="额外项目" tabindex="-1">额外项目 <a class="header-anchor" href="#额外项目" aria-label="Permalink to &quot;额外项目&quot;">​</a></h3><h4 id="part-4-2-1" tabindex="-1">Part 4.2.1 <a class="header-anchor" href="#part-4-2-1" aria-label="Permalink to &quot;Part 4.2.1&quot;">​</a></h4><p>配置VLAN,令PC0与PC2加入<code>vlan10</code>,PC1与PC3加入<code>vlan20</code></p><h4 id="part-4-2-2" tabindex="-1">Part 4.2.2 <a class="header-anchor" href="#part-4-2-2" aria-label="Permalink to &quot;Part 4.2.2&quot;">​</a></h4><p>将<code>Edge_Route</code>替换为防火墙,并配置规则,使:</p><ul><li><strong>PC0-3</strong>能连通PC4、<code>Edge_Route</code>、<strong>ICP</strong></li><li><strong>PC4</strong>能连通<code>Edge_Route</code>、ICP、不能连通<strong>PC0-3</strong></li><li><strong>ICP</strong>不能连通PC0-4、<code>Edge_Route</code></li></ul><p>小Tip:</p><ul><li>记得保存</li><li>网络设备的命令行和Linux还是不太一样,建议多看看文档.可以在命令行里面输入<code>?</code>来获取可用命令和参数</li></ul><h2 id="本题提交方式" tabindex="-1"><strong>本题提交方式</strong> <a class="header-anchor" href="#本题提交方式" aria-label="Permalink to &quot;**本题提交方式**&quot;">​</a></h2><blockquote><p><a href="https://submit.glimmer.org.cn" target="_blank" rel="noreferrer"> 提交点这里 </a></p></blockquote><h2 id="出题人联系方式" tabindex="-1">出题人联系方式 <a class="header-anchor" href="#出题人联系方式" aria-label="Permalink to &quot;出题人联系方式&quot;">​</a></h2><blockquote><p>fw190 QQ:1242641543</p><p>杨沁雨 QQ: 1353516434</p></blockquote>',85),n=[i];function s(p,d,c,h,P,g){return o(),r("div",null,n)}const q=t(l,[["render",s]]);export{m as __pageData,q as default};
